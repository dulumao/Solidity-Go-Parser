// Code generated from Solidity.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser // Solidity

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 118, 915,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 3, 2, 3, 2, 3, 2, 7, 2, 166, 10, 2, 12, 2, 14, 2, 169, 11, 2, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 5, 5, 182,
	10, 5, 3, 6, 3, 6, 5, 6, 186, 10, 6, 3, 7, 3, 7, 3, 8, 5, 8, 191, 10, 8,
	3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 5, 9, 198, 10, 9, 3, 10, 3, 10, 3, 10, 3,
	10, 5, 10, 204, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 210, 10, 10,
	3, 10, 3, 10, 5, 10, 214, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 7, 10, 224, 10, 10, 12, 10, 14, 10, 227, 11, 10, 3, 10,
	3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 234, 10, 10, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 7, 11, 242, 10, 11, 12, 11, 14, 11, 245, 11, 11, 5, 11,
	247, 10, 11, 3, 11, 3, 11, 7, 11, 251, 10, 11, 12, 11, 14, 11, 254, 11,
	11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 263, 10, 12,
	12, 12, 14, 12, 266, 11, 12, 3, 12, 3, 12, 5, 12, 270, 10, 12, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 279, 10, 13, 3, 14, 3, 14,
	7, 14, 283, 10, 14, 12, 14, 14, 14, 286, 11, 14, 3, 14, 3, 14, 3, 14, 5,
	14, 291, 10, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15,
	300, 10, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 7, 16, 312, 10, 16, 12, 16, 14, 16, 315, 11, 16, 5, 16, 317,
	10, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 5, 17, 324, 10, 17, 3, 17, 3,
	17, 3, 18, 3, 18, 3, 18, 5, 18, 331, 10, 18, 3, 18, 5, 18, 334, 10, 18,
	3, 19, 3, 19, 5, 19, 338, 10, 19, 3, 19, 3, 19, 3, 19, 5, 19, 343, 10,
	19, 3, 19, 3, 19, 5, 19, 347, 10, 19, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 7, 21, 358, 10, 21, 12, 21, 14, 21, 361, 11,
	21, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 367, 10, 22, 3, 22, 3, 22, 3, 23,
	3, 23, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 377, 10, 24, 3, 24, 3, 24, 7,
	24, 381, 10, 24, 12, 24, 14, 24, 384, 11, 24, 3, 24, 3, 24, 3, 25, 3, 25,
	3, 25, 3, 25, 7, 25, 392, 10, 25, 12, 25, 14, 25, 395, 11, 25, 5, 25, 397,
	10, 25, 3, 25, 3, 25, 3, 26, 3, 26, 5, 26, 403, 10, 26, 3, 26, 5, 26, 406,
	10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 7, 27, 412, 10, 27, 12, 27, 14, 27,
	415, 11, 27, 5, 27, 417, 10, 27, 3, 27, 3, 27, 3, 28, 3, 28, 5, 28, 423,
	10, 28, 3, 28, 5, 28, 426, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 7, 29, 432,
	10, 29, 12, 29, 14, 29, 435, 11, 29, 5, 29, 437, 10, 29, 3, 29, 3, 29,
	3, 30, 3, 30, 5, 30, 443, 10, 30, 3, 31, 3, 31, 5, 31, 447, 10, 31, 3,
	31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 456, 10, 32, 3, 32,
	3, 32, 3, 32, 5, 32, 461, 10, 32, 3, 32, 7, 32, 464, 10, 32, 12, 32, 14,
	32, 467, 11, 32, 3, 33, 3, 33, 3, 33, 7, 33, 472, 10, 33, 12, 33, 14, 33,
	475, 11, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 7, 35, 489, 10, 35, 12, 35, 14, 35, 492, 11, 35,
	3, 35, 3, 35, 5, 35, 496, 10, 35, 3, 36, 3, 36, 3, 37, 3, 37, 3, 38, 3,
	38, 7, 38, 504, 10, 38, 12, 38, 14, 38, 507, 11, 38, 3, 38, 3, 38, 3, 39,
	3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5,
	39, 522, 10, 39, 3, 40, 3, 40, 3, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 5, 41, 534, 10, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 43, 3, 43, 5, 43, 544, 10, 43, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44,
	550, 10, 44, 3, 44, 5, 44, 553, 10, 44, 3, 44, 3, 44, 5, 44, 557, 10, 44,
	3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 5, 45, 564, 10, 45, 3, 45, 3, 45, 3,
	46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 47, 3, 47, 3, 47,
	3, 48, 3, 48, 3, 48, 3, 49, 3, 49, 5, 49, 584, 10, 49, 3, 49, 3, 49, 3,
	50, 3, 50, 3, 50, 3, 51, 3, 51, 3, 51, 5, 51, 594, 10, 51, 3, 51, 3, 51,
	5, 51, 598, 10, 51, 3, 51, 3, 51, 3, 52, 3, 52, 5, 52, 604, 10, 52, 3,
	52, 7, 52, 607, 10, 52, 12, 52, 14, 52, 610, 11, 52, 3, 52, 5, 52, 613,
	10, 52, 3, 52, 3, 52, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3,
	54, 3, 54, 3, 54, 5, 54, 637, 10, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3,
	54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3,
	54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 7,
	54, 696, 10, 54, 12, 54, 14, 54, 699, 11, 54, 3, 55, 3, 55, 3, 55, 3, 55,
	3, 55, 3, 55, 3, 55, 5, 55, 708, 10, 55, 3, 56, 3, 56, 3, 56, 7, 56, 713,
	10, 56, 12, 56, 14, 56, 716, 11, 56, 3, 57, 3, 57, 3, 57, 7, 57, 721, 10,
	57, 12, 57, 14, 57, 724, 11, 57, 3, 57, 5, 57, 727, 10, 57, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 59, 3, 59, 5, 59, 735, 10, 59, 3, 59, 3, 59, 5, 59, 739,
	10, 59, 5, 59, 741, 10, 59, 3, 60, 3, 60, 7, 60, 745, 10, 60, 12, 60, 14,
	60, 748, 11, 60, 3, 60, 3, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61,
	3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3,
	61, 5, 61, 769, 10, 61, 3, 62, 3, 62, 5, 62, 773, 10, 62, 3, 63, 3, 63,
	3, 63, 3, 63, 5, 63, 779, 10, 63, 3, 63, 3, 63, 5, 63, 783, 10, 63, 3,
	63, 3, 63, 7, 63, 787, 10, 63, 12, 63, 14, 63, 790, 11, 63, 3, 63, 5, 63,
	793, 10, 63, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 799, 10, 64, 3, 65, 3,
	65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 810, 10, 66,
	3, 67, 3, 67, 3, 67, 7, 67, 815, 10, 67, 12, 67, 14, 67, 818, 11, 67, 3,
	68, 3, 68, 3, 68, 3, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 7, 70, 829,
	10, 70, 12, 70, 14, 70, 832, 11, 70, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71,
	3, 71, 5, 71, 840, 10, 71, 3, 72, 3, 72, 3, 72, 3, 72, 5, 72, 846, 10,
	72, 3, 72, 3, 72, 5, 72, 850, 10, 72, 3, 72, 3, 72, 3, 73, 3, 73, 3, 73,
	3, 74, 3, 74, 3, 74, 5, 74, 860, 10, 74, 3, 74, 3, 74, 3, 74, 5, 74, 865,
	10, 74, 3, 74, 3, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 76, 3, 76, 3, 77,
	3, 77, 3, 77, 3, 77, 3, 78, 3, 78, 5, 78, 881, 10, 78, 3, 78, 3, 78, 5,
	78, 885, 10, 78, 7, 78, 887, 10, 78, 12, 78, 14, 78, 890, 11, 78, 3, 78,
	3, 78, 3, 78, 3, 78, 3, 78, 7, 78, 897, 10, 78, 12, 78, 14, 78, 900, 11,
	78, 5, 78, 902, 10, 78, 3, 78, 5, 78, 905, 10, 78, 3, 79, 3, 79, 3, 80,
	3, 80, 5, 80, 911, 10, 80, 3, 81, 3, 81, 3, 81, 2, 4, 62, 106, 82, 2, 4,
	6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
	44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
	80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
	114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142,
	144, 146, 148, 150, 152, 154, 156, 158, 160, 2, 19, 3, 2, 5, 9, 3, 2, 17,
	19, 5, 2, 104, 104, 108, 108, 110, 111, 3, 2, 37, 38, 5, 2, 104, 104, 109,
	109, 112, 113, 4, 2, 46, 50, 90, 94, 3, 2, 51, 52, 3, 2, 54, 55, 3, 2,
	56, 57, 4, 2, 12, 12, 61, 62, 3, 2, 63, 64, 3, 2, 6, 9, 3, 2, 67, 68, 4,
	2, 23, 23, 73, 82, 5, 2, 97, 98, 100, 100, 115, 115, 3, 2, 97, 98, 4, 2,
	13, 13, 114, 114, 2, 999, 2, 167, 3, 2, 2, 2, 4, 172, 3, 2, 2, 2, 6, 177,
	3, 2, 2, 2, 8, 181, 3, 2, 2, 2, 10, 183, 3, 2, 2, 2, 12, 187, 3, 2, 2,
	2, 14, 190, 3, 2, 2, 2, 16, 194, 3, 2, 2, 2, 18, 233, 3, 2, 2, 2, 20, 235,
	3, 2, 2, 2, 22, 257, 3, 2, 2, 2, 24, 278, 3, 2, 2, 2, 26, 280, 3, 2, 2,
	2, 28, 294, 3, 2, 2, 2, 30, 303, 3, 2, 2, 2, 32, 320, 3, 2, 2, 2, 34, 327,
	3, 2, 2, 2, 36, 335, 3, 2, 2, 2, 38, 348, 3, 2, 2, 2, 40, 359, 3, 2, 2,
	2, 42, 362, 3, 2, 2, 2, 44, 370, 3, 2, 2, 2, 46, 372, 3, 2, 2, 2, 48, 387,
	3, 2, 2, 2, 50, 400, 3, 2, 2, 2, 52, 407, 3, 2, 2, 2, 54, 420, 3, 2, 2,
	2, 56, 427, 3, 2, 2, 2, 58, 440, 3, 2, 2, 2, 60, 444, 3, 2, 2, 2, 62, 455,
	3, 2, 2, 2, 64, 468, 3, 2, 2, 2, 66, 476, 3, 2, 2, 2, 68, 483, 3, 2, 2,
	2, 70, 497, 3, 2, 2, 2, 72, 499, 3, 2, 2, 2, 74, 501, 3, 2, 2, 2, 76, 521,
	3, 2, 2, 2, 78, 523, 3, 2, 2, 2, 80, 526, 3, 2, 2, 2, 82, 535, 3, 2, 2,
	2, 84, 543, 3, 2, 2, 2, 86, 545, 3, 2, 2, 2, 88, 561, 3, 2, 2, 2, 90, 567,
	3, 2, 2, 2, 92, 575, 3, 2, 2, 2, 94, 578, 3, 2, 2, 2, 96, 581, 3, 2, 2,
	2, 98, 587, 3, 2, 2, 2, 100, 593, 3, 2, 2, 2, 102, 601, 3, 2, 2, 2, 104,
	616, 3, 2, 2, 2, 106, 636, 3, 2, 2, 2, 108, 707, 3, 2, 2, 2, 110, 709,
	3, 2, 2, 2, 112, 717, 3, 2, 2, 2, 114, 728, 3, 2, 2, 2, 116, 740, 3, 2,
	2, 2, 118, 742, 3, 2, 2, 2, 120, 768, 3, 2, 2, 2, 122, 772, 3, 2, 2, 2,
	124, 778, 3, 2, 2, 2, 126, 794, 3, 2, 2, 2, 128, 800, 3, 2, 2, 2, 130,
	809, 3, 2, 2, 2, 132, 811, 3, 2, 2, 2, 134, 819, 3, 2, 2, 2, 136, 822,
	3, 2, 2, 2, 138, 825, 3, 2, 2, 2, 140, 839, 3, 2, 2, 2, 142, 841, 3, 2,
	2, 2, 144, 853, 3, 2, 2, 2, 146, 856, 3, 2, 2, 2, 148, 868, 3, 2, 2, 2,
	150, 872, 3, 2, 2, 2, 152, 874, 3, 2, 2, 2, 154, 904, 3, 2, 2, 2, 156,
	906, 3, 2, 2, 2, 158, 908, 3, 2, 2, 2, 160, 912, 3, 2, 2, 2, 162, 166,
	5, 4, 3, 2, 163, 166, 5, 18, 10, 2, 164, 166, 5, 20, 11, 2, 165, 162, 3,
	2, 2, 2, 165, 163, 3, 2, 2, 2, 165, 164, 3, 2, 2, 2, 166, 169, 3, 2, 2,
	2, 167, 165, 3, 2, 2, 2, 167, 168, 3, 2, 2, 2, 168, 170, 3, 2, 2, 2, 169,
	167, 3, 2, 2, 2, 170, 171, 7, 2, 2, 3, 171, 3, 3, 2, 2, 2, 172, 173, 7,
	3, 2, 2, 173, 174, 5, 6, 4, 2, 174, 175, 5, 8, 5, 2, 175, 176, 7, 4, 2,
	2, 176, 5, 3, 2, 2, 2, 177, 178, 5, 160, 81, 2, 178, 7, 3, 2, 2, 2, 179,
	182, 5, 10, 6, 2, 180, 182, 5, 106, 54, 2, 181, 179, 3, 2, 2, 2, 181, 180,
	3, 2, 2, 2, 182, 9, 3, 2, 2, 2, 183, 185, 5, 14, 8, 2, 184, 186, 5, 14,
	8, 2, 185, 184, 3, 2, 2, 2, 185, 186, 3, 2, 2, 2, 186, 11, 3, 2, 2, 2,
	187, 188, 9, 2, 2, 2, 188, 13, 3, 2, 2, 2, 189, 191, 5, 12, 7, 2, 190,
	189, 3, 2, 2, 2, 190, 191, 3, 2, 2, 2, 191, 192, 3, 2, 2, 2, 192, 193,
	7, 95, 2, 2, 193, 15, 3, 2, 2, 2, 194, 197, 5, 160, 81, 2, 195, 196, 7,
	10, 2, 2, 196, 198, 5, 160, 81, 2, 197, 195, 3, 2, 2, 2, 197, 198, 3, 2,
	2, 2, 198, 17, 3, 2, 2, 2, 199, 200, 7, 11, 2, 2, 200, 203, 7, 115, 2,
	2, 201, 202, 7, 10, 2, 2, 202, 204, 5, 160, 81, 2, 203, 201, 3, 2, 2, 2,
	203, 204, 3, 2, 2, 2, 204, 205, 3, 2, 2, 2, 205, 234, 7, 4, 2, 2, 206,
	209, 7, 11, 2, 2, 207, 210, 7, 12, 2, 2, 208, 210, 5, 160, 81, 2, 209,
	207, 3, 2, 2, 2, 209, 208, 3, 2, 2, 2, 210, 213, 3, 2, 2, 2, 211, 212,
	7, 10, 2, 2, 212, 214, 5, 160, 81, 2, 213, 211, 3, 2, 2, 2, 213, 214, 3,
	2, 2, 2, 214, 215, 3, 2, 2, 2, 215, 216, 7, 13, 2, 2, 216, 217, 7, 115,
	2, 2, 217, 234, 7, 4, 2, 2, 218, 219, 7, 11, 2, 2, 219, 220, 7, 14, 2,
	2, 220, 225, 5, 16, 9, 2, 221, 222, 7, 15, 2, 2, 222, 224, 5, 16, 9, 2,
	223, 221, 3, 2, 2, 2, 224, 227, 3, 2, 2, 2, 225, 223, 3, 2, 2, 2, 225,
	226, 3, 2, 2, 2, 226, 228, 3, 2, 2, 2, 227, 225, 3, 2, 2, 2, 228, 229,
	7, 16, 2, 2, 229, 230, 7, 13, 2, 2, 230, 231, 7, 115, 2, 2, 231, 232, 7,
	4, 2, 2, 232, 234, 3, 2, 2, 2, 233, 199, 3, 2, 2, 2, 233, 206, 3, 2, 2,
	2, 233, 218, 3, 2, 2, 2, 234, 19, 3, 2, 2, 2, 235, 236, 9, 3, 2, 2, 236,
	246, 5, 160, 81, 2, 237, 238, 7, 20, 2, 2, 238, 243, 5, 22, 12, 2, 239,
	240, 7, 15, 2, 2, 240, 242, 5, 22, 12, 2, 241, 239, 3, 2, 2, 2, 242, 245,
	3, 2, 2, 2, 243, 241, 3, 2, 2, 2, 243, 244, 3, 2, 2, 2, 244, 247, 3, 2,
	2, 2, 245, 243, 3, 2, 2, 2, 246, 237, 3, 2, 2, 2, 246, 247, 3, 2, 2, 2,
	247, 248, 3, 2, 2, 2, 248, 252, 7, 14, 2, 2, 249, 251, 5, 24, 13, 2, 250,
	249, 3, 2, 2, 2, 251, 254, 3, 2, 2, 2, 252, 250, 3, 2, 2, 2, 252, 253,
	3, 2, 2, 2, 253, 255, 3, 2, 2, 2, 254, 252, 3, 2, 2, 2, 255, 256, 7, 16,
	2, 2, 256, 21, 3, 2, 2, 2, 257, 269, 5, 64, 33, 2, 258, 259, 7, 21, 2,
	2, 259, 264, 5, 106, 54, 2, 260, 261, 7, 15, 2, 2, 261, 263, 5, 106, 54,
	2, 262, 260, 3, 2, 2, 2, 263, 266, 3, 2, 2, 2, 264, 262, 3, 2, 2, 2, 264,
	265, 3, 2, 2, 2, 265, 267, 3, 2, 2, 2, 266, 264, 3, 2, 2, 2, 267, 268,
	7, 22, 2, 2, 268, 270, 3, 2, 2, 2, 269, 258, 3, 2, 2, 2, 269, 270, 3, 2,
	2, 2, 270, 23, 3, 2, 2, 2, 271, 279, 5, 26, 14, 2, 272, 279, 5, 28, 15,
	2, 273, 279, 5, 30, 16, 2, 274, 279, 5, 32, 17, 2, 275, 279, 5, 36, 19,
	2, 276, 279, 5, 42, 22, 2, 277, 279, 5, 46, 24, 2, 278, 271, 3, 2, 2, 2,
	278, 272, 3, 2, 2, 2, 278, 273, 3, 2, 2, 2, 278, 274, 3, 2, 2, 2, 278,
	275, 3, 2, 2, 2, 278, 276, 3, 2, 2, 2, 278, 277, 3, 2, 2, 2, 279, 25, 3,
	2, 2, 2, 280, 284, 5, 62, 32, 2, 281, 283, 9, 4, 2, 2, 282, 281, 3, 2,
	2, 2, 283, 286, 3, 2, 2, 2, 284, 282, 3, 2, 2, 2, 284, 285, 3, 2, 2, 2,
	285, 287, 3, 2, 2, 2, 286, 284, 3, 2, 2, 2, 287, 290, 5, 160, 81, 2, 288,
	289, 7, 23, 2, 2, 289, 291, 5, 106, 54, 2, 290, 288, 3, 2, 2, 2, 290, 291,
	3, 2, 2, 2, 291, 292, 3, 2, 2, 2, 292, 293, 7, 4, 2, 2, 293, 27, 3, 2,
	2, 2, 294, 295, 7, 24, 2, 2, 295, 296, 5, 160, 81, 2, 296, 299, 7, 25,
	2, 2, 297, 300, 7, 12, 2, 2, 298, 300, 5, 62, 32, 2, 299, 297, 3, 2, 2,
	2, 299, 298, 3, 2, 2, 2, 300, 301, 3, 2, 2, 2, 301, 302, 7, 4, 2, 2, 302,
	29, 3, 2, 2, 2, 303, 304, 7, 26, 2, 2, 304, 305, 5, 160, 81, 2, 305, 316,
	7, 14, 2, 2, 306, 307, 5, 60, 31, 2, 307, 313, 7, 4, 2, 2, 308, 309, 5,
	60, 31, 2, 309, 310, 7, 4, 2, 2, 310, 312, 3, 2, 2, 2, 311, 308, 3, 2,
	2, 2, 312, 315, 3, 2, 2, 2, 313, 311, 3, 2, 2, 2, 313, 314, 3, 2, 2, 2,
	314, 317, 3, 2, 2, 2, 315, 313, 3, 2, 2, 2, 316, 306, 3, 2, 2, 2, 316,
	317, 3, 2, 2, 2, 317, 318, 3, 2, 2, 2, 318, 319, 7, 16, 2, 2, 319, 31,
	3, 2, 2, 2, 320, 321, 7, 27, 2, 2, 321, 323, 5, 160, 81, 2, 322, 324, 5,
	48, 25, 2, 323, 322, 3, 2, 2, 2, 323, 324, 3, 2, 2, 2, 324, 325, 3, 2,
	2, 2, 325, 326, 5, 74, 38, 2, 326, 33, 3, 2, 2, 2, 327, 333, 5, 160, 81,
	2, 328, 330, 7, 21, 2, 2, 329, 331, 5, 110, 56, 2, 330, 329, 3, 2, 2, 2,
	330, 331, 3, 2, 2, 2, 331, 332, 3, 2, 2, 2, 332, 334, 7, 22, 2, 2, 333,
	328, 3, 2, 2, 2, 333, 334, 3, 2, 2, 2, 334, 35, 3, 2, 2, 2, 335, 337, 7,
	28, 2, 2, 336, 338, 5, 160, 81, 2, 337, 336, 3, 2, 2, 2, 337, 338, 3, 2,
	2, 2, 338, 339, 3, 2, 2, 2, 339, 340, 5, 48, 25, 2, 340, 342, 5, 40, 21,
	2, 341, 343, 5, 38, 20, 2, 342, 341, 3, 2, 2, 2, 342, 343, 3, 2, 2, 2,
	343, 346, 3, 2, 2, 2, 344, 347, 7, 4, 2, 2, 345, 347, 5, 74, 38, 2, 346,
	344, 3, 2, 2, 2, 346, 345, 3, 2, 2, 2, 347, 37, 3, 2, 2, 2, 348, 349, 7,
	29, 2, 2, 349, 350, 5, 48, 25, 2, 350, 39, 3, 2, 2, 2, 351, 358, 5, 34,
	18, 2, 352, 358, 5, 72, 37, 2, 353, 358, 7, 106, 2, 2, 354, 358, 7, 111,
	2, 2, 355, 358, 7, 108, 2, 2, 356, 358, 7, 110, 2, 2, 357, 351, 3, 2, 2,
	2, 357, 352, 3, 2, 2, 2, 357, 353, 3, 2, 2, 2, 357, 354, 3, 2, 2, 2, 357,
	355, 3, 2, 2, 2, 357, 356, 3, 2, 2, 2, 358, 361, 3, 2, 2, 2, 359, 357,
	3, 2, 2, 2, 359, 360, 3, 2, 2, 2, 360, 41, 3, 2, 2, 2, 361, 359, 3, 2,
	2, 2, 362, 363, 7, 30, 2, 2, 363, 364, 5, 160, 81, 2, 364, 366, 5, 52,
	27, 2, 365, 367, 7, 102, 2, 2, 366, 365, 3, 2, 2, 2, 366, 367, 3, 2, 2,
	2, 367, 368, 3, 2, 2, 2, 368, 369, 7, 4, 2, 2, 369, 43, 3, 2, 2, 2, 370,
	371, 5, 160, 81, 2, 371, 45, 3, 2, 2, 2, 372, 373, 7, 31, 2, 2, 373, 374,
	5, 160, 81, 2, 374, 376, 7, 14, 2, 2, 375, 377, 5, 44, 23, 2, 376, 375,
	3, 2, 2, 2, 376, 377, 3, 2, 2, 2, 377, 382, 3, 2, 2, 2, 378, 379, 7, 15,
	2, 2, 379, 381, 5, 44, 23, 2, 380, 378, 3, 2, 2, 2, 381, 384, 3, 2, 2,
	2, 382, 380, 3, 2, 2, 2, 382, 383, 3, 2, 2, 2, 383, 385, 3, 2, 2, 2, 384,
	382, 3, 2, 2, 2, 385, 386, 7, 16, 2, 2, 386, 47, 3, 2, 2, 2, 387, 396,
	7, 21, 2, 2, 388, 393, 5, 50, 26, 2, 389, 390, 7, 15, 2, 2, 390, 392, 5,
	50, 26, 2, 391, 389, 3, 2, 2, 2, 392, 395, 3, 2, 2, 2, 393, 391, 3, 2,
	2, 2, 393, 394, 3, 2, 2, 2, 394, 397, 3, 2, 2, 2, 395, 393, 3, 2, 2, 2,
	396, 388, 3, 2, 2, 2, 396, 397, 3, 2, 2, 2, 397, 398, 3, 2, 2, 2, 398,
	399, 7, 22, 2, 2, 399, 49, 3, 2, 2, 2, 400, 402, 5, 62, 32, 2, 401, 403,
	5, 70, 36, 2, 402, 401, 3, 2, 2, 2, 402, 403, 3, 2, 2, 2, 403, 405, 3,
	2, 2, 2, 404, 406, 5, 160, 81, 2, 405, 404, 3, 2, 2, 2, 405, 406, 3, 2,
	2, 2, 406, 51, 3, 2, 2, 2, 407, 416, 7, 21, 2, 2, 408, 413, 5, 54, 28,
	2, 409, 410, 7, 15, 2, 2, 410, 412, 5, 54, 28, 2, 411, 409, 3, 2, 2, 2,
	412, 415, 3, 2, 2, 2, 413, 411, 3, 2, 2, 2, 413, 414, 3, 2, 2, 2, 414,
	417, 3, 2, 2, 2, 415, 413, 3, 2, 2, 2, 416, 408, 3, 2, 2, 2, 416, 417,
	3, 2, 2, 2, 417, 418, 3, 2, 2, 2, 418, 419, 7, 22, 2, 2, 419, 53, 3, 2,
	2, 2, 420, 422, 5, 62, 32, 2, 421, 423, 7, 107, 2, 2, 422, 421, 3, 2, 2,
	2, 422, 423, 3, 2, 2, 2, 423, 425, 3, 2, 2, 2, 424, 426, 5, 160, 81, 2,
	425, 424, 3, 2, 2, 2, 425, 426, 3, 2, 2, 2, 426, 55, 3, 2, 2, 2, 427, 436,
	7, 21, 2, 2, 428, 433, 5, 58, 30, 2, 429, 430, 7, 15, 2, 2, 430, 432, 5,
	58, 30, 2, 431, 429, 3, 2, 2, 2, 432, 435, 3, 2, 2, 2, 433, 431, 3, 2,
	2, 2, 433, 434, 3, 2, 2, 2, 434, 437, 3, 2, 2, 2, 435, 433, 3, 2, 2, 2,
	436, 428, 3, 2, 2, 2, 436, 437, 3, 2, 2, 2, 437, 438, 3, 2, 2, 2, 438,
	439, 7, 22, 2, 2, 439, 57, 3, 2, 2, 2, 440, 442, 5, 62, 32, 2, 441, 443,
	5, 70, 36, 2, 442, 441, 3, 2, 2, 2, 442, 443, 3, 2, 2, 2, 443, 59, 3, 2,
	2, 2, 444, 446, 5, 62, 32, 2, 445, 447, 5, 70, 36, 2, 446, 445, 3, 2, 2,
	2, 446, 447, 3, 2, 2, 2, 447, 448, 3, 2, 2, 2, 448, 449, 5, 160, 81, 2,
	449, 61, 3, 2, 2, 2, 450, 451, 8, 32, 1, 2, 451, 456, 5, 104, 53, 2, 452,
	456, 5, 64, 33, 2, 453, 456, 5, 66, 34, 2, 454, 456, 5, 68, 35, 2, 455,
	450, 3, 2, 2, 2, 455, 452, 3, 2, 2, 2, 455, 453, 3, 2, 2, 2, 455, 454,
	3, 2, 2, 2, 456, 465, 3, 2, 2, 2, 457, 458, 12, 4, 2, 2, 458, 460, 7, 32,
	2, 2, 459, 461, 5, 106, 54, 2, 460, 459, 3, 2, 2, 2, 460, 461, 3, 2, 2,
	2, 461, 462, 3, 2, 2, 2, 462, 464, 7, 33, 2, 2, 463, 457, 3, 2, 2, 2, 464,
	467, 3, 2, 2, 2, 465, 463, 3, 2, 2, 2, 465, 466, 3, 2, 2, 2, 466, 63, 3,
	2, 2, 2, 467, 465, 3, 2, 2, 2, 468, 473, 5, 160, 81, 2, 469, 470, 7, 34,
	2, 2, 470, 472, 5, 160, 81, 2, 471, 469, 3, 2, 2, 2, 472, 475, 3, 2, 2,
	2, 473, 471, 3, 2, 2, 2, 473, 474, 3, 2, 2, 2, 474, 65, 3, 2, 2, 2, 475,
	473, 3, 2, 2, 2, 476, 477, 7, 35, 2, 2, 477, 478, 7, 21, 2, 2, 478, 479,
	5, 104, 53, 2, 479, 480, 7, 36, 2, 2, 480, 481, 5, 62, 32, 2, 481, 482,
	7, 22, 2, 2, 482, 67, 3, 2, 2, 2, 483, 484, 7, 28, 2, 2, 484, 490, 5, 56,
	29, 2, 485, 489, 7, 108, 2, 2, 486, 489, 7, 106, 2, 2, 487, 489, 5, 72,
	37, 2, 488, 485, 3, 2, 2, 2, 488, 486, 3, 2, 2, 2, 488, 487, 3, 2, 2, 2,
	489, 492, 3, 2, 2, 2, 490, 488, 3, 2, 2, 2, 490, 491, 3, 2, 2, 2, 491,
	495, 3, 2, 2, 2, 492, 490, 3, 2, 2, 2, 493, 494, 7, 29, 2, 2, 494, 496,
	5, 56, 29, 2, 495, 493, 3, 2, 2, 2, 495, 496, 3, 2, 2, 2, 496, 69, 3, 2,
	2, 2, 497, 498, 9, 5, 2, 2, 498, 71, 3, 2, 2, 2, 499, 500, 9, 6, 2, 2,
	500, 73, 3, 2, 2, 2, 501, 505, 7, 14, 2, 2, 502, 504, 5, 76, 39, 2, 503,
	502, 3, 2, 2, 2, 504, 507, 3, 2, 2, 2, 505, 503, 3, 2, 2, 2, 505, 506,
	3, 2, 2, 2, 506, 508, 3, 2, 2, 2, 507, 505, 3, 2, 2, 2, 508, 509, 7, 16,
	2, 2, 509, 75, 3, 2, 2, 2, 510, 522, 5, 80, 41, 2, 511, 522, 5, 82, 42,
	2, 512, 522, 5, 86, 44, 2, 513, 522, 5, 74, 38, 2, 514, 522, 5, 88, 45,
	2, 515, 522, 5, 90, 46, 2, 516, 522, 5, 92, 47, 2, 517, 522, 5, 94, 48,
	2, 518, 522, 5, 96, 49, 2, 519, 522, 5, 98, 50, 2, 520, 522, 5, 84, 43,
	2, 521, 510, 3, 2, 2, 2, 521, 511, 3, 2, 2, 2, 521, 512, 3, 2, 2, 2, 521,
	513, 3, 2, 2, 2, 521, 514, 3, 2, 2, 2, 521, 515, 3, 2, 2, 2, 521, 516,
	3, 2, 2, 2, 521, 517, 3, 2, 2, 2, 521, 518, 3, 2, 2, 2, 521, 519, 3, 2,
	2, 2, 521, 520, 3, 2, 2, 2, 522, 77, 3, 2, 2, 2, 523, 524, 5, 106, 54,
	2, 524, 525, 7, 4, 2, 2, 525, 79, 3, 2, 2, 2, 526, 527, 7, 39, 2, 2, 527,
	528, 7, 21, 2, 2, 528, 529, 5, 106, 54, 2, 529, 530, 7, 22, 2, 2, 530,
	533, 5, 76, 39, 2, 531, 532, 7, 40, 2, 2, 532, 534, 5, 76, 39, 2, 533,
	531, 3, 2, 2, 2, 533, 534, 3, 2, 2, 2, 534, 81, 3, 2, 2, 2, 535, 536, 7,
	41, 2, 2, 536, 537, 7, 21, 2, 2, 537, 538, 5, 106, 54, 2, 538, 539, 7,
	22, 2, 2, 539, 540, 5, 76, 39, 2, 540, 83, 3, 2, 2, 2, 541, 544, 5, 100,
	51, 2, 542, 544, 5, 78, 40, 2, 543, 541, 3, 2, 2, 2, 543, 542, 3, 2, 2,
	2, 544, 85, 3, 2, 2, 2, 545, 546, 7, 25, 2, 2, 546, 549, 7, 21, 2, 2, 547,
	550, 5, 84, 43, 2, 548, 550, 7, 4, 2, 2, 549, 547, 3, 2, 2, 2, 549, 548,
	3, 2, 2, 2, 550, 552, 3, 2, 2, 2, 551, 553, 5, 106, 54, 2, 552, 551, 3,
	2, 2, 2, 552, 553, 3, 2, 2, 2, 553, 554, 3, 2, 2, 2, 554, 556, 7, 4, 2,
	2, 555, 557, 5, 106, 54, 2, 556, 555, 3, 2, 2, 2, 556, 557, 3, 2, 2, 2,
	557, 558, 3, 2, 2, 2, 558, 559, 7, 22, 2, 2, 559, 560, 5, 76, 39, 2, 560,
	87, 3, 2, 2, 2, 561, 563, 7, 42, 2, 2, 562, 564, 7, 115, 2, 2, 563, 562,
	3, 2, 2, 2, 563, 564, 3, 2, 2, 2, 564, 565, 3, 2, 2, 2, 565, 566, 5, 118,
	60, 2, 566, 89, 3, 2, 2, 2, 567, 568, 7, 43, 2, 2, 568, 569, 5, 76, 39,
	2, 569, 570, 7, 41, 2, 2, 570, 571, 7, 21, 2, 2, 571, 572, 5, 106, 54,
	2, 572, 573, 7, 22, 2, 2, 573, 574, 7, 4, 2, 2, 574, 91, 3, 2, 2, 2, 575,
	576, 7, 105, 2, 2, 576, 577, 7, 4, 2, 2, 577, 93, 3, 2, 2, 2, 578, 579,
	7, 103, 2, 2, 579, 580, 7, 4, 2, 2, 580, 95, 3, 2, 2, 2, 581, 583, 7, 44,
	2, 2, 582, 584, 5, 106, 54, 2, 583, 582, 3, 2, 2, 2, 583, 584, 3, 2, 2,
	2, 584, 585, 3, 2, 2, 2, 585, 586, 7, 4, 2, 2, 586, 97, 3, 2, 2, 2, 587,
	588, 7, 45, 2, 2, 588, 589, 7, 4, 2, 2, 589, 99, 3, 2, 2, 2, 590, 591,
	7, 46, 2, 2, 591, 594, 5, 102, 52, 2, 592, 594, 5, 60, 31, 2, 593, 590,
	3, 2, 2, 2, 593, 592, 3, 2, 2, 2, 594, 597, 3, 2, 2, 2, 595, 596, 7, 23,
	2, 2, 596, 598, 5, 106, 54, 2, 597, 595, 3, 2, 2, 2, 597, 598, 3, 2, 2,
	2, 598, 599, 3, 2, 2, 2, 599, 600, 7, 4, 2, 2, 600, 101, 3, 2, 2, 2, 601,
	608, 7, 21, 2, 2, 602, 604, 5, 160, 81, 2, 603, 602, 3, 2, 2, 2, 603, 604,
	3, 2, 2, 2, 604, 605, 3, 2, 2, 2, 605, 607, 7, 15, 2, 2, 606, 603, 3, 2,
	2, 2, 607, 610, 3, 2, 2, 2, 608, 606, 3, 2, 2, 2, 608, 609, 3, 2, 2, 2,
	609, 612, 3, 2, 2, 2, 610, 608, 3, 2, 2, 2, 611, 613, 5, 160, 81, 2, 612,
	611, 3, 2, 2, 2, 612, 613, 3, 2, 2, 2, 613, 614, 3, 2, 2, 2, 614, 615,
	7, 22, 2, 2, 615, 103, 3, 2, 2, 2, 616, 617, 9, 7, 2, 2, 617, 105, 3, 2,
	2, 2, 618, 619, 8, 54, 1, 2, 619, 620, 7, 53, 2, 2, 620, 637, 5, 62, 32,
	2, 621, 622, 7, 21, 2, 2, 622, 623, 5, 106, 54, 2, 623, 624, 7, 22, 2,
	2, 624, 637, 3, 2, 2, 2, 625, 626, 9, 8, 2, 2, 626, 637, 5, 106, 54, 21,
	627, 628, 9, 9, 2, 2, 628, 637, 5, 106, 54, 20, 629, 630, 9, 10, 2, 2,
	630, 637, 5, 106, 54, 19, 631, 632, 7, 58, 2, 2, 632, 637, 5, 106, 54,
	18, 633, 634, 7, 59, 2, 2, 634, 637, 5, 106, 54, 17, 635, 637, 5, 108,
	55, 2, 636, 618, 3, 2, 2, 2, 636, 621, 3, 2, 2, 2, 636, 625, 3, 2, 2, 2,
	636, 627, 3, 2, 2, 2, 636, 629, 3, 2, 2, 2, 636, 631, 3, 2, 2, 2, 636,
	633, 3, 2, 2, 2, 636, 635, 3, 2, 2, 2, 637, 697, 3, 2, 2, 2, 638, 639,
	12, 16, 2, 2, 639, 640, 7, 60, 2, 2, 640, 696, 5, 106, 54, 17, 641, 642,
	12, 15, 2, 2, 642, 643, 9, 11, 2, 2, 643, 696, 5, 106, 54, 16, 644, 645,
	12, 14, 2, 2, 645, 646, 9, 9, 2, 2, 646, 696, 5, 106, 54, 15, 647, 648,
	12, 13, 2, 2, 648, 649, 9, 12, 2, 2, 649, 696, 5, 106, 54, 14, 650, 651,
	12, 12, 2, 2, 651, 652, 7, 65, 2, 2, 652, 696, 5, 106, 54, 13, 653, 654,
	12, 11, 2, 2, 654, 655, 7, 5, 2, 2, 655, 696, 5, 106, 54, 12, 656, 657,
	12, 10, 2, 2, 657, 658, 7, 66, 2, 2, 658, 696, 5, 106, 54, 11, 659, 660,
	12, 9, 2, 2, 660, 661, 9, 13, 2, 2, 661, 696, 5, 106, 54, 10, 662, 663,
	12, 8, 2, 2, 663, 664, 9, 14, 2, 2, 664, 696, 5, 106, 54, 9, 665, 666,
	12, 7, 2, 2, 666, 667, 7, 69, 2, 2, 667, 696, 5, 106, 54, 8, 668, 669,
	12, 6, 2, 2, 669, 670, 7, 70, 2, 2, 670, 696, 5, 106, 54, 7, 671, 672,
	12, 5, 2, 2, 672, 673, 7, 71, 2, 2, 673, 674, 5, 106, 54, 2, 674, 675,
	7, 72, 2, 2, 675, 676, 5, 106, 54, 6, 676, 696, 3, 2, 2, 2, 677, 678, 12,
	4, 2, 2, 678, 679, 9, 15, 2, 2, 679, 696, 5, 106, 54, 5, 680, 681, 12,
	27, 2, 2, 681, 696, 9, 8, 2, 2, 682, 683, 12, 25, 2, 2, 683, 684, 7, 32,
	2, 2, 684, 685, 5, 106, 54, 2, 685, 686, 7, 33, 2, 2, 686, 696, 3, 2, 2,
	2, 687, 688, 12, 24, 2, 2, 688, 689, 7, 21, 2, 2, 689, 690, 5, 116, 59,
	2, 690, 691, 7, 22, 2, 2, 691, 696, 3, 2, 2, 2, 692, 693, 12, 23, 2, 2,
	693, 694, 7, 34, 2, 2, 694, 696, 5, 160, 81, 2, 695, 638, 3, 2, 2, 2, 695,
	641, 3, 2, 2, 2, 695, 644, 3, 2, 2, 2, 695, 647, 3, 2, 2, 2, 695, 650,
	3, 2, 2, 2, 695, 653, 3, 2, 2, 2, 695, 656, 3, 2, 2, 2, 695, 659, 3, 2,
	2, 2, 695, 662, 3, 2, 2, 2, 695, 665, 3, 2, 2, 2, 695, 668, 3, 2, 2, 2,
	695, 671, 3, 2, 2, 2, 695, 677, 3, 2, 2, 2, 695, 680, 3, 2, 2, 2, 695,
	682, 3, 2, 2, 2, 695, 687, 3, 2, 2, 2, 695, 692, 3, 2, 2, 2, 696, 699,
	3, 2, 2, 2, 697, 695, 3, 2, 2, 2, 697, 698, 3, 2, 2, 2, 698, 107, 3, 2,
	2, 2, 699, 697, 3, 2, 2, 2, 700, 708, 7, 96, 2, 2, 701, 708, 5, 158, 80,
	2, 702, 708, 7, 100, 2, 2, 703, 708, 7, 115, 2, 2, 704, 708, 5, 160, 81,
	2, 705, 708, 5, 154, 78, 2, 706, 708, 5, 156, 79, 2, 707, 700, 3, 2, 2,
	2, 707, 701, 3, 2, 2, 2, 707, 702, 3, 2, 2, 2, 707, 703, 3, 2, 2, 2, 707,
	704, 3, 2, 2, 2, 707, 705, 3, 2, 2, 2, 707, 706, 3, 2, 2, 2, 708, 109,
	3, 2, 2, 2, 709, 714, 5, 106, 54, 2, 710, 711, 7, 15, 2, 2, 711, 713, 5,
	106, 54, 2, 712, 710, 3, 2, 2, 2, 713, 716, 3, 2, 2, 2, 714, 712, 3, 2,
	2, 2, 714, 715, 3, 2, 2, 2, 715, 111, 3, 2, 2, 2, 716, 714, 3, 2, 2, 2,
	717, 722, 5, 114, 58, 2, 718, 719, 7, 15, 2, 2, 719, 721, 5, 114, 58, 2,
	720, 718, 3, 2, 2, 2, 721, 724, 3, 2, 2, 2, 722, 720, 3, 2, 2, 2, 722,
	723, 3, 2, 2, 2, 723, 726, 3, 2, 2, 2, 724, 722, 3, 2, 2, 2, 725, 727,
	7, 15, 2, 2, 726, 725, 3, 2, 2, 2, 726, 727, 3, 2, 2, 2, 727, 113, 3, 2,
	2, 2, 728, 729, 5, 160, 81, 2, 729, 730, 7, 72, 2, 2, 730, 731, 5, 106,
	54, 2, 731, 115, 3, 2, 2, 2, 732, 734, 7, 14, 2, 2, 733, 735, 5, 112, 57,
	2, 734, 733, 3, 2, 2, 2, 734, 735, 3, 2, 2, 2, 735, 736, 3, 2, 2, 2, 736,
	741, 7, 16, 2, 2, 737, 739, 5, 110, 56, 2, 738, 737, 3, 2, 2, 2, 738, 739,
	3, 2, 2, 2, 739, 741, 3, 2, 2, 2, 740, 732, 3, 2, 2, 2, 740, 738, 3, 2,
	2, 2, 741, 117, 3, 2, 2, 2, 742, 746, 7, 14, 2, 2, 743, 745, 5, 120, 61,
	2, 744, 743, 3, 2, 2, 2, 745, 748, 3, 2, 2, 2, 746, 744, 3, 2, 2, 2, 746,
	747, 3, 2, 2, 2, 747, 749, 3, 2, 2, 2, 748, 746, 3, 2, 2, 2, 749, 750,
	7, 16, 2, 2, 750, 119, 3, 2, 2, 2, 751, 769, 5, 160, 81, 2, 752, 769, 5,
	118, 60, 2, 753, 769, 5, 122, 62, 2, 754, 769, 5, 126, 64, 2, 755, 769,
	5, 128, 65, 2, 756, 769, 5, 134, 68, 2, 757, 769, 5, 136, 69, 2, 758, 769,
	5, 138, 70, 2, 759, 769, 5, 142, 72, 2, 760, 769, 5, 146, 74, 2, 761, 769,
	5, 148, 75, 2, 762, 769, 7, 103, 2, 2, 763, 769, 7, 105, 2, 2, 764, 769,
	5, 152, 77, 2, 765, 769, 5, 158, 80, 2, 766, 769, 7, 115, 2, 2, 767, 769,
	7, 100, 2, 2, 768, 751, 3, 2, 2, 2, 768, 752, 3, 2, 2, 2, 768, 753, 3,
	2, 2, 2, 768, 754, 3, 2, 2, 2, 768, 755, 3, 2, 2, 2, 768, 756, 3, 2, 2,
	2, 768, 757, 3, 2, 2, 2, 768, 758, 3, 2, 2, 2, 768, 759, 3, 2, 2, 2, 768,
	760, 3, 2, 2, 2, 768, 761, 3, 2, 2, 2, 768, 762, 3, 2, 2, 2, 768, 763,
	3, 2, 2, 2, 768, 764, 3, 2, 2, 2, 768, 765, 3, 2, 2, 2, 768, 766, 3, 2,
	2, 2, 768, 767, 3, 2, 2, 2, 769, 121, 3, 2, 2, 2, 770, 773, 5, 124, 63,
	2, 771, 773, 5, 150, 76, 2, 772, 770, 3, 2, 2, 2, 772, 771, 3, 2, 2, 2,
	773, 123, 3, 2, 2, 2, 774, 779, 7, 44, 2, 2, 775, 779, 7, 47, 2, 2, 776,
	779, 7, 50, 2, 2, 777, 779, 5, 160, 81, 2, 778, 774, 3, 2, 2, 2, 778, 775,
	3, 2, 2, 2, 778, 776, 3, 2, 2, 2, 778, 777, 3, 2, 2, 2, 779, 792, 3, 2,
	2, 2, 780, 782, 7, 21, 2, 2, 781, 783, 5, 122, 62, 2, 782, 781, 3, 2, 2,
	2, 782, 783, 3, 2, 2, 2, 783, 788, 3, 2, 2, 2, 784, 785, 7, 15, 2, 2, 785,
	787, 5, 122, 62, 2, 786, 784, 3, 2, 2, 2, 787, 790, 3, 2, 2, 2, 788, 786,
	3, 2, 2, 2, 788, 789, 3, 2, 2, 2, 789, 791, 3, 2, 2, 2, 790, 788, 3, 2,
	2, 2, 791, 793, 7, 22, 2, 2, 792, 780, 3, 2, 2, 2, 792, 793, 3, 2, 2, 2,
	793, 125, 3, 2, 2, 2, 794, 795, 7, 83, 2, 2, 795, 798, 5, 130, 66, 2, 796,
	797, 7, 84, 2, 2, 797, 799, 5, 122, 62, 2, 798, 796, 3, 2, 2, 2, 798, 799,
	3, 2, 2, 2, 799, 127, 3, 2, 2, 2, 800, 801, 5, 130, 66, 2, 801, 802, 7,
	84, 2, 2, 802, 803, 5, 122, 62, 2, 803, 129, 3, 2, 2, 2, 804, 810, 5, 160,
	81, 2, 805, 806, 7, 21, 2, 2, 806, 807, 5, 132, 67, 2, 807, 808, 7, 22,
	2, 2, 808, 810, 3, 2, 2, 2, 809, 804, 3, 2, 2, 2, 809, 805, 3, 2, 2, 2,
	810, 131, 3, 2, 2, 2, 811, 816, 5, 160, 81, 2, 812, 813, 7, 15, 2, 2, 813,
	815, 5, 160, 81, 2, 814, 812, 3, 2, 2, 2, 815, 818, 3, 2, 2, 2, 816, 814,
	3, 2, 2, 2, 816, 817, 3, 2, 2, 2, 817, 133, 3, 2, 2, 2, 818, 816, 3, 2,
	2, 2, 819, 820, 7, 85, 2, 2, 820, 821, 5, 160, 81, 2, 821, 135, 3, 2, 2,
	2, 822, 823, 5, 160, 81, 2, 823, 824, 7, 72, 2, 2, 824, 137, 3, 2, 2, 2,
	825, 826, 7, 86, 2, 2, 826, 830, 5, 122, 62, 2, 827, 829, 5, 140, 71, 2,
	828, 827, 3, 2, 2, 2, 829, 832, 3, 2, 2, 2, 830, 828, 3, 2, 2, 2, 830,
	831, 3, 2, 2, 2, 831, 139, 3, 2, 2, 2, 832, 830, 3, 2, 2, 2, 833, 834,
	7, 87, 2, 2, 834, 835, 5, 150, 76, 2, 835, 836, 5, 118, 60, 2, 836, 840,
	3, 2, 2, 2, 837, 838, 7, 88, 2, 2, 838, 840, 5, 118, 60, 2, 839, 833, 3,
	2, 2, 2, 839, 837, 3, 2, 2, 2, 840, 141, 3, 2, 2, 2, 841, 842, 7, 28, 2,
	2, 842, 843, 5, 160, 81, 2, 843, 845, 7, 21, 2, 2, 844, 846, 5, 132, 67,
	2, 845, 844, 3, 2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 847, 3, 2, 2, 2, 847,
	849, 7, 22, 2, 2, 848, 850, 5, 144, 73, 2, 849, 848, 3, 2, 2, 2, 849, 850,
	3, 2, 2, 2, 850, 851, 3, 2, 2, 2, 851, 852, 5, 118, 60, 2, 852, 143, 3,
	2, 2, 2, 853, 854, 7, 89, 2, 2, 854, 855, 5, 132, 67, 2, 855, 145, 3, 2,
	2, 2, 856, 859, 7, 25, 2, 2, 857, 860, 5, 118, 60, 2, 858, 860, 5, 122,
	62, 2, 859, 857, 3, 2, 2, 2, 859, 858, 3, 2, 2, 2, 860, 861, 3, 2, 2, 2,
	861, 864, 5, 122, 62, 2, 862, 865, 5, 118, 60, 2, 863, 865, 5, 122, 62,
	2, 864, 862, 3, 2, 2, 2, 864, 863, 3, 2, 2, 2, 865, 866, 3, 2, 2, 2, 866,
	867, 5, 118, 60, 2, 867, 147, 3, 2, 2, 2, 868, 869, 7, 39, 2, 2, 869, 870,
	5, 122, 62, 2, 870, 871, 5, 118, 60, 2, 871, 149, 3, 2, 2, 2, 872, 873,
	9, 16, 2, 2, 873, 151, 3, 2, 2, 2, 874, 875, 7, 42, 2, 2, 875, 876, 5,
	160, 81, 2, 876, 877, 5, 118, 60, 2, 877, 153, 3, 2, 2, 2, 878, 880, 7,
	21, 2, 2, 879, 881, 5, 106, 54, 2, 880, 879, 3, 2, 2, 2, 880, 881, 3, 2,
	2, 2, 881, 888, 3, 2, 2, 2, 882, 884, 7, 15, 2, 2, 883, 885, 5, 106, 54,
	2, 884, 883, 3, 2, 2, 2, 884, 885, 3, 2, 2, 2, 885, 887, 3, 2, 2, 2, 886,
	882, 3, 2, 2, 2, 887, 890, 3, 2, 2, 2, 888, 886, 3, 2, 2, 2, 888, 889,
	3, 2, 2, 2, 889, 891, 3, 2, 2, 2, 890, 888, 3, 2, 2, 2, 891, 905, 7, 22,
	2, 2, 892, 901, 7, 32, 2, 2, 893, 898, 5, 106, 54, 2, 894, 895, 7, 15,
	2, 2, 895, 897, 5, 106, 54, 2, 896, 894, 3, 2, 2, 2, 897, 900, 3, 2, 2,
	2, 898, 896, 3, 2, 2, 2, 898, 899, 3, 2, 2, 2, 899, 902, 3, 2, 2, 2, 900,
	898, 3, 2, 2, 2, 901, 893, 3, 2, 2, 2, 901, 902, 3, 2, 2, 2, 902, 903,
	3, 2, 2, 2, 903, 905, 7, 33, 2, 2, 904, 878, 3, 2, 2, 2, 904, 892, 3, 2,
	2, 2, 905, 155, 3, 2, 2, 2, 906, 907, 5, 104, 53, 2, 907, 157, 3, 2, 2,
	2, 908, 910, 9, 17, 2, 2, 909, 911, 7, 99, 2, 2, 910, 909, 3, 2, 2, 2,
	910, 911, 3, 2, 2, 2, 911, 159, 3, 2, 2, 2, 912, 913, 9, 18, 2, 2, 913,
	161, 3, 2, 2, 2, 101, 165, 167, 181, 185, 190, 197, 203, 209, 213, 225,
	233, 243, 246, 252, 264, 269, 278, 284, 290, 299, 313, 316, 323, 330, 333,
	337, 342, 346, 357, 359, 366, 376, 382, 393, 396, 402, 405, 413, 416, 422,
	425, 433, 436, 442, 446, 455, 460, 465, 473, 488, 490, 495, 505, 521, 533,
	543, 549, 552, 556, 563, 583, 593, 597, 603, 608, 612, 636, 695, 697, 707,
	714, 722, 726, 734, 738, 740, 746, 768, 772, 778, 782, 788, 792, 798, 809,
	816, 830, 839, 845, 849, 859, 864, 880, 884, 888, 898, 901, 904, 910,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'pragma'", "';'", "'^'", "'>='", "'>'", "'<'", "'<='", "'as'", "'import'",
	"'*'", "'from'", "'{'", "','", "'}'", "'contract'", "'interface'", "'library'",
	"'is'", "'('", "')'", "'='", "'using'", "'for'", "'struct'", "'modifier'",
	"'function'", "'returns'", "'event'", "'enum'", "'['", "']'", "'.'", "'mapping'",
	"'=>'", "'memory'", "'storage'", "'if'", "'else'", "'while'", "'assembly'",
	"'do'", "'return'", "'throw'", "'var'", "'address'", "'bool'", "'string'",
	"'byte'", "'++'", "'--'", "'new'", "'+'", "'-'", "'after'", "'delete'",
	"'!'", "'~'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='",
	"'!='", "'&&'", "'||'", "'?'", "':'", "'|='", "'^='", "'&='", "'<<='",
	"'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'",
	"'switch'", "'case'", "'default'", "'->'", "", "", "", "", "", "", "",
	"", "", "", "", "", "'anonymous'", "'break'", "'constant'", "'continue'",
	"'external'", "'indexed'", "'internal'", "'payable'", "'private'", "'public'",
	"'pure'", "'view'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Int",
	"Uint", "Byte", "Fixed", "Ufixed", "VersionLiteral", "BooleanLiteral",
	"DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword",
	"AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ContinueKeyword",
	"ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword",
	"PrivateKeyword", "PublicKeyword", "PureKeyword", "ViewKeyword", "Identifier",
	"StringLiteral", "WS", "COMMENT", "LINE_COMMENT",
}

var ruleNames = []string{
	"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version",
	"versionOperator", "versionConstraint", "importDeclaration", "importDirective",
	"contractDefinition", "inheritanceSpecifier", "contractPart", "stateVariableDeclaration",
	"usingForDeclaration", "structDefinition", "modifierDefinition", "modifierInvocation",
	"functionDefinition", "returnParameters", "modifierList", "eventDefinition",
	"enumValue", "enumDefinition", "parameterList", "parameter", "eventParameterList",
	"eventParameter", "functionTypeParameterList", "functionTypeParameter",
	"variableDeclaration", "typeName", "userDefinedTypeName", "mapping", "functionTypeName",
	"storageLocation", "stateMutability", "block", "statement", "expressionStatement",
	"ifStatement", "whileStatement", "simpleStatement", "forStatement", "inlineAssemblyStatement",
	"doWhileStatement", "continueStatement", "breakStatement", "returnStatement",
	"throwStatement", "variableDeclarationStatement", "identifierList", "elementaryTypeName",
	"expression", "primaryExpression", "expressionList", "nameValueList", "nameValue",
	"functionCallArguments", "assemblyBlock", "assemblyItem", "assemblyExpression",
	"assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList",
	"assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition",
	"assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns",
	"assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", "tupleExpression",
	"elementaryTypeNameExpression", "numberLiteral", "identifier",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type SolidityParser struct {
	*antlr.BaseParser
}

func NewSolidityParser(input antlr.TokenStream) *SolidityParser {
	this := new(SolidityParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Solidity.g4"

	return this
}

// SolidityParser tokens.
const (
	SolidityParserEOF              = antlr.TokenEOF
	SolidityParserT__0             = 1
	SolidityParserT__1             = 2
	SolidityParserT__2             = 3
	SolidityParserT__3             = 4
	SolidityParserT__4             = 5
	SolidityParserT__5             = 6
	SolidityParserT__6             = 7
	SolidityParserT__7             = 8
	SolidityParserT__8             = 9
	SolidityParserT__9             = 10
	SolidityParserT__10            = 11
	SolidityParserT__11            = 12
	SolidityParserT__12            = 13
	SolidityParserT__13            = 14
	SolidityParserT__14            = 15
	SolidityParserT__15            = 16
	SolidityParserT__16            = 17
	SolidityParserT__17            = 18
	SolidityParserT__18            = 19
	SolidityParserT__19            = 20
	SolidityParserT__20            = 21
	SolidityParserT__21            = 22
	SolidityParserT__22            = 23
	SolidityParserT__23            = 24
	SolidityParserT__24            = 25
	SolidityParserT__25            = 26
	SolidityParserT__26            = 27
	SolidityParserT__27            = 28
	SolidityParserT__28            = 29
	SolidityParserT__29            = 30
	SolidityParserT__30            = 31
	SolidityParserT__31            = 32
	SolidityParserT__32            = 33
	SolidityParserT__33            = 34
	SolidityParserT__34            = 35
	SolidityParserT__35            = 36
	SolidityParserT__36            = 37
	SolidityParserT__37            = 38
	SolidityParserT__38            = 39
	SolidityParserT__39            = 40
	SolidityParserT__40            = 41
	SolidityParserT__41            = 42
	SolidityParserT__42            = 43
	SolidityParserT__43            = 44
	SolidityParserT__44            = 45
	SolidityParserT__45            = 46
	SolidityParserT__46            = 47
	SolidityParserT__47            = 48
	SolidityParserT__48            = 49
	SolidityParserT__49            = 50
	SolidityParserT__50            = 51
	SolidityParserT__51            = 52
	SolidityParserT__52            = 53
	SolidityParserT__53            = 54
	SolidityParserT__54            = 55
	SolidityParserT__55            = 56
	SolidityParserT__56            = 57
	SolidityParserT__57            = 58
	SolidityParserT__58            = 59
	SolidityParserT__59            = 60
	SolidityParserT__60            = 61
	SolidityParserT__61            = 62
	SolidityParserT__62            = 63
	SolidityParserT__63            = 64
	SolidityParserT__64            = 65
	SolidityParserT__65            = 66
	SolidityParserT__66            = 67
	SolidityParserT__67            = 68
	SolidityParserT__68            = 69
	SolidityParserT__69            = 70
	SolidityParserT__70            = 71
	SolidityParserT__71            = 72
	SolidityParserT__72            = 73
	SolidityParserT__73            = 74
	SolidityParserT__74            = 75
	SolidityParserT__75            = 76
	SolidityParserT__76            = 77
	SolidityParserT__77            = 78
	SolidityParserT__78            = 79
	SolidityParserT__79            = 80
	SolidityParserT__80            = 81
	SolidityParserT__81            = 82
	SolidityParserT__82            = 83
	SolidityParserT__83            = 84
	SolidityParserT__84            = 85
	SolidityParserT__85            = 86
	SolidityParserT__86            = 87
	SolidityParserInt              = 88
	SolidityParserUint             = 89
	SolidityParserByte             = 90
	SolidityParserFixed            = 91
	SolidityParserUfixed           = 92
	SolidityParserVersionLiteral   = 93
	SolidityParserBooleanLiteral   = 94
	SolidityParserDecimalNumber    = 95
	SolidityParserHexNumber        = 96
	SolidityParserNumberUnit       = 97
	SolidityParserHexLiteral       = 98
	SolidityParserReservedKeyword  = 99
	SolidityParserAnonymousKeyword = 100
	SolidityParserBreakKeyword     = 101
	SolidityParserConstantKeyword  = 102
	SolidityParserContinueKeyword  = 103
	SolidityParserExternalKeyword  = 104
	SolidityParserIndexedKeyword   = 105
	SolidityParserInternalKeyword  = 106
	SolidityParserPayableKeyword   = 107
	SolidityParserPrivateKeyword   = 108
	SolidityParserPublicKeyword    = 109
	SolidityParserPureKeyword      = 110
	SolidityParserViewKeyword      = 111
	SolidityParserIdentifier       = 112
	SolidityParserStringLiteral    = 113
	SolidityParserWS               = 114
	SolidityParserCOMMENT          = 115
	SolidityParserLINE_COMMENT     = 116
)

// SolidityParser rules.
const (
	SolidityParserRULE_sourceUnit                   = 0
	SolidityParserRULE_pragmaDirective              = 1
	SolidityParserRULE_pragmaName                   = 2
	SolidityParserRULE_pragmaValue                  = 3
	SolidityParserRULE_version                      = 4
	SolidityParserRULE_versionOperator              = 5
	SolidityParserRULE_versionConstraint            = 6
	SolidityParserRULE_importDeclaration            = 7
	SolidityParserRULE_importDirective              = 8
	SolidityParserRULE_contractDefinition           = 9
	SolidityParserRULE_inheritanceSpecifier         = 10
	SolidityParserRULE_contractPart                 = 11
	SolidityParserRULE_stateVariableDeclaration     = 12
	SolidityParserRULE_usingForDeclaration          = 13
	SolidityParserRULE_structDefinition             = 14
	SolidityParserRULE_modifierDefinition           = 15
	SolidityParserRULE_modifierInvocation           = 16
	SolidityParserRULE_functionDefinition           = 17
	SolidityParserRULE_returnParameters             = 18
	SolidityParserRULE_modifierList                 = 19
	SolidityParserRULE_eventDefinition              = 20
	SolidityParserRULE_enumValue                    = 21
	SolidityParserRULE_enumDefinition               = 22
	SolidityParserRULE_parameterList                = 23
	SolidityParserRULE_parameter                    = 24
	SolidityParserRULE_eventParameterList           = 25
	SolidityParserRULE_eventParameter               = 26
	SolidityParserRULE_functionTypeParameterList    = 27
	SolidityParserRULE_functionTypeParameter        = 28
	SolidityParserRULE_variableDeclaration          = 29
	SolidityParserRULE_typeName                     = 30
	SolidityParserRULE_userDefinedTypeName          = 31
	SolidityParserRULE_mapping                      = 32
	SolidityParserRULE_functionTypeName             = 33
	SolidityParserRULE_storageLocation              = 34
	SolidityParserRULE_stateMutability              = 35
	SolidityParserRULE_block                        = 36
	SolidityParserRULE_statement                    = 37
	SolidityParserRULE_expressionStatement          = 38
	SolidityParserRULE_ifStatement                  = 39
	SolidityParserRULE_whileStatement               = 40
	SolidityParserRULE_simpleStatement              = 41
	SolidityParserRULE_forStatement                 = 42
	SolidityParserRULE_inlineAssemblyStatement      = 43
	SolidityParserRULE_doWhileStatement             = 44
	SolidityParserRULE_continueStatement            = 45
	SolidityParserRULE_breakStatement               = 46
	SolidityParserRULE_returnStatement              = 47
	SolidityParserRULE_throwStatement               = 48
	SolidityParserRULE_variableDeclarationStatement = 49
	SolidityParserRULE_identifierList               = 50
	SolidityParserRULE_elementaryTypeName           = 51
	SolidityParserRULE_expression                   = 52
	SolidityParserRULE_primaryExpression            = 53
	SolidityParserRULE_expressionList               = 54
	SolidityParserRULE_nameValueList                = 55
	SolidityParserRULE_nameValue                    = 56
	SolidityParserRULE_functionCallArguments        = 57
	SolidityParserRULE_assemblyBlock                = 58
	SolidityParserRULE_assemblyItem                 = 59
	SolidityParserRULE_assemblyExpression           = 60
	SolidityParserRULE_assemblyCall                 = 61
	SolidityParserRULE_assemblyLocalDefinition      = 62
	SolidityParserRULE_assemblyAssignment           = 63
	SolidityParserRULE_assemblyIdentifierOrList     = 64
	SolidityParserRULE_assemblyIdentifierList       = 65
	SolidityParserRULE_assemblyStackAssignment      = 66
	SolidityParserRULE_labelDefinition              = 67
	SolidityParserRULE_assemblySwitch               = 68
	SolidityParserRULE_assemblyCase                 = 69
	SolidityParserRULE_assemblyFunctionDefinition   = 70
	SolidityParserRULE_assemblyFunctionReturns      = 71
	SolidityParserRULE_assemblyFor                  = 72
	SolidityParserRULE_assemblyIf                   = 73
	SolidityParserRULE_assemblyLiteral              = 74
	SolidityParserRULE_subAssembly                  = 75
	SolidityParserRULE_tupleExpression              = 76
	SolidityParserRULE_elementaryTypeNameExpression = 77
	SolidityParserRULE_numberLiteral                = 78
	SolidityParserRULE_identifier                   = 79
)

// ISourceUnitContext is an interface to support dynamic dispatch.
type ISourceUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSourceUnitContext differentiates from other interfaces.
	IsSourceUnitContext()
}

type SourceUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceUnitContext() *SourceUnitContext {
	var p = new(SourceUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_sourceUnit
	return p
}

func (*SourceUnitContext) IsSourceUnitContext() {}

func NewSourceUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceUnitContext {
	var p = new(SourceUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_sourceUnit

	return p
}

func (s *SourceUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceUnitContext) EOF() antlr.TerminalNode {
	return s.GetToken(SolidityParserEOF, 0)
}

func (s *SourceUnitContext) AllPragmaDirective() []IPragmaDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPragmaDirectiveContext)(nil)).Elem())
	var tst = make([]IPragmaDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPragmaDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) PragmaDirective(i int) IPragmaDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPragmaDirectiveContext)
}

func (s *SourceUnitContext) AllImportDirective() []IImportDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportDirectiveContext)(nil)).Elem())
	var tst = make([]IImportDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ImportDirective(i int) IImportDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportDirectiveContext)
}

func (s *SourceUnitContext) AllContractDefinition() []IContractDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractDefinitionContext)(nil)).Elem())
	var tst = make([]IContractDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ContractDefinition(i int) IContractDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractDefinitionContext)
}

func (s *SourceUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SourceUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterSourceUnit(s)
	}
}

func (s *SourceUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitSourceUnit(s)
	}
}

func (p *SolidityParser) SourceUnit() (localctx ISourceUnitContext) {
	localctx = NewSourceUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SolidityParserRULE_sourceUnit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(165)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__0)|(1<<SolidityParserT__8)|(1<<SolidityParserT__14)|(1<<SolidityParserT__15)|(1<<SolidityParserT__16))) != 0 {
		p.SetState(163)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserT__0:
			{
				p.SetState(160)
				p.PragmaDirective()
			}

		case SolidityParserT__8:
			{
				p.SetState(161)
				p.ImportDirective()
			}

		case SolidityParserT__14, SolidityParserT__15, SolidityParserT__16:
			{
				p.SetState(162)
				p.ContractDefinition()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(167)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(168)
		p.Match(SolidityParserEOF)
	}

	return localctx
}

// IPragmaDirectiveContext is an interface to support dynamic dispatch.
type IPragmaDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaDirectiveContext differentiates from other interfaces.
	IsPragmaDirectiveContext()
}

type PragmaDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaDirectiveContext() *PragmaDirectiveContext {
	var p = new(PragmaDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaDirective
	return p
}

func (*PragmaDirectiveContext) IsPragmaDirectiveContext() {}

func NewPragmaDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaDirectiveContext {
	var p = new(PragmaDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaDirective

	return p
}

func (s *PragmaDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaDirectiveContext) PragmaName() IPragmaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragmaNameContext)
}

func (s *PragmaDirectiveContext) PragmaValue() IPragmaValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragmaValueContext)
}

func (s *PragmaDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PragmaDirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterPragmaDirective(s)
	}
}

func (s *PragmaDirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitPragmaDirective(s)
	}
}

func (p *SolidityParser) PragmaDirective() (localctx IPragmaDirectiveContext) {
	localctx = NewPragmaDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SolidityParserRULE_pragmaDirective)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(170)
		p.Match(SolidityParserT__0)
	}
	{
		p.SetState(171)
		p.PragmaName()
	}
	{
		p.SetState(172)
		p.PragmaValue()
	}
	{
		p.SetState(173)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IPragmaNameContext is an interface to support dynamic dispatch.
type IPragmaNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaNameContext differentiates from other interfaces.
	IsPragmaNameContext()
}

type PragmaNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaNameContext() *PragmaNameContext {
	var p = new(PragmaNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaName
	return p
}

func (*PragmaNameContext) IsPragmaNameContext() {}

func NewPragmaNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaNameContext {
	var p = new(PragmaNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaName

	return p
}

func (s *PragmaNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PragmaNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PragmaNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterPragmaName(s)
	}
}

func (s *PragmaNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitPragmaName(s)
	}
}

func (p *SolidityParser) PragmaName() (localctx IPragmaNameContext) {
	localctx = NewPragmaNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SolidityParserRULE_pragmaName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(175)
		p.Identifier()
	}

	return localctx
}

// IPragmaValueContext is an interface to support dynamic dispatch.
type IPragmaValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaValueContext differentiates from other interfaces.
	IsPragmaValueContext()
}

type PragmaValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaValueContext() *PragmaValueContext {
	var p = new(PragmaValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaValue
	return p
}

func (*PragmaValueContext) IsPragmaValueContext() {}

func NewPragmaValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaValueContext {
	var p = new(PragmaValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaValue

	return p
}

func (s *PragmaValueContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaValueContext) Version() IVersionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVersionContext)
}

func (s *PragmaValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PragmaValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PragmaValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterPragmaValue(s)
	}
}

func (s *PragmaValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitPragmaValue(s)
	}
}

func (p *SolidityParser) PragmaValue() (localctx IPragmaValueContext) {
	localctx = NewPragmaValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SolidityParserRULE_pragmaValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(179)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__2, SolidityParserT__3, SolidityParserT__4, SolidityParserT__5, SolidityParserT__6, SolidityParserVersionLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(177)
			p.Version()
		}

	case SolidityParserT__10, SolidityParserT__18, SolidityParserT__29, SolidityParserT__43, SolidityParserT__44, SolidityParserT__45, SolidityParserT__46, SolidityParserT__47, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserT__52, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserIdentifier, SolidityParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(178)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVersionContext is an interface to support dynamic dispatch.
type IVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionContext differentiates from other interfaces.
	IsVersionContext()
}

type VersionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionContext() *VersionContext {
	var p = new(VersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_version
	return p
}

func (*VersionContext) IsVersionContext() {}

func NewVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionContext {
	var p = new(VersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_version

	return p
}

func (s *VersionContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionContext) AllVersionConstraint() []IVersionConstraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVersionConstraintContext)(nil)).Elem())
	var tst = make([]IVersionConstraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVersionConstraintContext)
		}
	}

	return tst
}

func (s *VersionContext) VersionConstraint(i int) IVersionConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionConstraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVersionConstraintContext)
}

func (s *VersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVersion(s)
	}
}

func (s *VersionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVersion(s)
	}
}

func (p *SolidityParser) Version() (localctx IVersionContext) {
	localctx = NewVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SolidityParserRULE_version)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(181)
		p.VersionConstraint()
	}
	p.SetState(183)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__2)|(1<<SolidityParserT__3)|(1<<SolidityParserT__4)|(1<<SolidityParserT__5)|(1<<SolidityParserT__6))) != 0) || _la == SolidityParserVersionLiteral {
		{
			p.SetState(182)
			p.VersionConstraint()
		}

	}

	return localctx
}

// IVersionOperatorContext is an interface to support dynamic dispatch.
type IVersionOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionOperatorContext differentiates from other interfaces.
	IsVersionOperatorContext()
}

type VersionOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionOperatorContext() *VersionOperatorContext {
	var p = new(VersionOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_versionOperator
	return p
}

func (*VersionOperatorContext) IsVersionOperatorContext() {}

func NewVersionOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionOperatorContext {
	var p = new(VersionOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_versionOperator

	return p
}

func (s *VersionOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *VersionOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVersionOperator(s)
	}
}

func (s *VersionOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVersionOperator(s)
	}
}

func (p *SolidityParser) VersionOperator() (localctx IVersionOperatorContext) {
	localctx = NewVersionOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SolidityParserRULE_versionOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(185)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__2)|(1<<SolidityParserT__3)|(1<<SolidityParserT__4)|(1<<SolidityParserT__5)|(1<<SolidityParserT__6))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IVersionConstraintContext is an interface to support dynamic dispatch.
type IVersionConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionConstraintContext differentiates from other interfaces.
	IsVersionConstraintContext()
}

type VersionConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionConstraintContext() *VersionConstraintContext {
	var p = new(VersionConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_versionConstraint
	return p
}

func (*VersionConstraintContext) IsVersionConstraintContext() {}

func NewVersionConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionConstraintContext {
	var p = new(VersionConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_versionConstraint

	return p
}

func (s *VersionConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionConstraintContext) VersionLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserVersionLiteral, 0)
}

func (s *VersionConstraintContext) VersionOperator() IVersionOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVersionOperatorContext)
}

func (s *VersionConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVersionConstraint(s)
	}
}

func (s *VersionConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVersionConstraint(s)
	}
}

func (p *SolidityParser) VersionConstraint() (localctx IVersionConstraintContext) {
	localctx = NewVersionConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SolidityParserRULE_versionConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(188)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__2)|(1<<SolidityParserT__3)|(1<<SolidityParserT__4)|(1<<SolidityParserT__5)|(1<<SolidityParserT__6))) != 0 {
		{
			p.SetState(187)
			p.VersionOperator()
		}

	}
	{
		p.SetState(190)
		p.Match(SolidityParserVersionLiteral)
	}

	return localctx
}

// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importDeclaration
	return p
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ImportDeclarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterImportDeclaration(s)
	}
}

func (s *ImportDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitImportDeclaration(s)
	}
}

func (p *SolidityParser) ImportDeclaration() (localctx IImportDeclarationContext) {
	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SolidityParserRULE_importDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(192)
		p.Identifier()
	}
	p.SetState(195)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__7 {
		{
			p.SetState(193)
			p.Match(SolidityParserT__7)
		}
		{
			p.SetState(194)
			p.Identifier()
		}

	}

	return localctx
}

// IImportDirectiveContext is an interface to support dynamic dispatch.
type IImportDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDirectiveContext differentiates from other interfaces.
	IsImportDirectiveContext()
}

type ImportDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDirectiveContext() *ImportDirectiveContext {
	var p = new(ImportDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importDirective
	return p
}

func (*ImportDirectiveContext) IsImportDirectiveContext() {}

func NewImportDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDirectiveContext {
	var p = new(ImportDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importDirective

	return p
}

func (s *ImportDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDirectiveContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *ImportDirectiveContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ImportDirectiveContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportDirectiveContext) AllImportDeclaration() []IImportDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem())
	var tst = make([]IImportDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportDeclarationContext)
		}
	}

	return tst
}

func (s *ImportDirectiveContext) ImportDeclaration(i int) IImportDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *ImportDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterImportDirective(s)
	}
}

func (s *ImportDirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitImportDirective(s)
	}
}

func (p *SolidityParser) ImportDirective() (localctx IImportDirectiveContext) {
	localctx = NewImportDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SolidityParserRULE_importDirective)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(231)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(197)
			p.Match(SolidityParserT__8)
		}
		{
			p.SetState(198)
			p.Match(SolidityParserStringLiteral)
		}
		p.SetState(201)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__7 {
			{
				p.SetState(199)
				p.Match(SolidityParserT__7)
			}
			{
				p.SetState(200)
				p.Identifier()
			}

		}
		{
			p.SetState(203)
			p.Match(SolidityParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(204)
			p.Match(SolidityParserT__8)
		}
		p.SetState(207)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserT__9:
			{
				p.SetState(205)
				p.Match(SolidityParserT__9)
			}

		case SolidityParserT__10, SolidityParserIdentifier:
			{
				p.SetState(206)
				p.Identifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(211)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__7 {
			{
				p.SetState(209)
				p.Match(SolidityParserT__7)
			}
			{
				p.SetState(210)
				p.Identifier()
			}

		}
		{
			p.SetState(213)
			p.Match(SolidityParserT__10)
		}
		{
			p.SetState(214)
			p.Match(SolidityParserStringLiteral)
		}
		{
			p.SetState(215)
			p.Match(SolidityParserT__1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(216)
			p.Match(SolidityParserT__8)
		}
		{
			p.SetState(217)
			p.Match(SolidityParserT__11)
		}
		{
			p.SetState(218)
			p.ImportDeclaration()
		}
		p.SetState(223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 {
			{
				p.SetState(219)
				p.Match(SolidityParserT__12)
			}
			{
				p.SetState(220)
				p.ImportDeclaration()
			}

			p.SetState(225)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(226)
			p.Match(SolidityParserT__13)
		}
		{
			p.SetState(227)
			p.Match(SolidityParserT__10)
		}
		{
			p.SetState(228)
			p.Match(SolidityParserStringLiteral)
		}
		{
			p.SetState(229)
			p.Match(SolidityParserT__1)
		}

	}

	return localctx
}

// IContractDefinitionContext is an interface to support dynamic dispatch.
type IContractDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContractDefinitionContext differentiates from other interfaces.
	IsContractDefinitionContext()
}

type ContractDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContractDefinitionContext() *ContractDefinitionContext {
	var p = new(ContractDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_contractDefinition
	return p
}

func (*ContractDefinitionContext) IsContractDefinitionContext() {}

func NewContractDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContractDefinitionContext {
	var p = new(ContractDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_contractDefinition

	return p
}

func (s *ContractDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ContractDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ContractDefinitionContext) AllInheritanceSpecifier() []IInheritanceSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInheritanceSpecifierContext)(nil)).Elem())
	var tst = make([]IInheritanceSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInheritanceSpecifierContext)
		}
	}

	return tst
}

func (s *ContractDefinitionContext) InheritanceSpecifier(i int) IInheritanceSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInheritanceSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInheritanceSpecifierContext)
}

func (s *ContractDefinitionContext) AllContractPart() []IContractPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractPartContext)(nil)).Elem())
	var tst = make([]IContractPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractPartContext)
		}
	}

	return tst
}

func (s *ContractDefinitionContext) ContractPart(i int) IContractPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractPartContext)
}

func (s *ContractDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContractDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContractDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterContractDefinition(s)
	}
}

func (s *ContractDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitContractDefinition(s)
	}
}

func (p *SolidityParser) ContractDefinition() (localctx IContractDefinitionContext) {
	localctx = NewContractDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SolidityParserRULE_contractDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(233)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__14)|(1<<SolidityParserT__15)|(1<<SolidityParserT__16))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(234)
		p.Identifier()
	}
	p.SetState(244)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__17 {
		{
			p.SetState(235)
			p.Match(SolidityParserT__17)
		}
		{
			p.SetState(236)
			p.InheritanceSpecifier()
		}
		p.SetState(241)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 {
			{
				p.SetState(237)
				p.Match(SolidityParserT__12)
			}
			{
				p.SetState(238)
				p.InheritanceSpecifier()
			}

			p.SetState(243)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(246)
		p.Match(SolidityParserT__11)
	}
	p.SetState(250)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__21)|(1<<SolidityParserT__23)|(1<<SolidityParserT__24)|(1<<SolidityParserT__25)|(1<<SolidityParserT__27)|(1<<SolidityParserT__28))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SolidityParserT__32-33))|(1<<(SolidityParserT__43-33))|(1<<(SolidityParserT__44-33))|(1<<(SolidityParserT__45-33))|(1<<(SolidityParserT__46-33))|(1<<(SolidityParserT__47-33)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserIdentifier-88)))) != 0) {
		{
			p.SetState(247)
			p.ContractPart()
		}

		p.SetState(252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(253)
		p.Match(SolidityParserT__13)
	}

	return localctx
}

// IInheritanceSpecifierContext is an interface to support dynamic dispatch.
type IInheritanceSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInheritanceSpecifierContext differentiates from other interfaces.
	IsInheritanceSpecifierContext()
}

type InheritanceSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInheritanceSpecifierContext() *InheritanceSpecifierContext {
	var p = new(InheritanceSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifier
	return p
}

func (*InheritanceSpecifierContext) IsInheritanceSpecifierContext() {}

func NewInheritanceSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InheritanceSpecifierContext {
	var p = new(InheritanceSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifier

	return p
}

func (s *InheritanceSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *InheritanceSpecifierContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *InheritanceSpecifierContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InheritanceSpecifierContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InheritanceSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InheritanceSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InheritanceSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterInheritanceSpecifier(s)
	}
}

func (s *InheritanceSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitInheritanceSpecifier(s)
	}
}

func (p *SolidityParser) InheritanceSpecifier() (localctx IInheritanceSpecifierContext) {
	localctx = NewInheritanceSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SolidityParserRULE_inheritanceSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(255)
		p.UserDefinedTypeName()
	}
	p.SetState(267)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__18 {
		{
			p.SetState(256)
			p.Match(SolidityParserT__18)
		}
		{
			p.SetState(257)
			p.expression(0)
		}
		p.SetState(262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 {
			{
				p.SetState(258)
				p.Match(SolidityParserT__12)
			}
			{
				p.SetState(259)
				p.expression(0)
			}

			p.SetState(264)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(265)
			p.Match(SolidityParserT__19)
		}

	}

	return localctx
}

// IContractPartContext is an interface to support dynamic dispatch.
type IContractPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContractPartContext differentiates from other interfaces.
	IsContractPartContext()
}

type ContractPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContractPartContext() *ContractPartContext {
	var p = new(ContractPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_contractPart
	return p
}

func (*ContractPartContext) IsContractPartContext() {}

func NewContractPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContractPartContext {
	var p = new(ContractPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_contractPart

	return p
}

func (s *ContractPartContext) GetParser() antlr.Parser { return s.parser }

func (s *ContractPartContext) StateVariableDeclaration() IStateVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStateVariableDeclarationContext)
}

func (s *ContractPartContext) UsingForDeclaration() IUsingForDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingForDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingForDeclarationContext)
}

func (s *ContractPartContext) StructDefinition() IStructDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDefinitionContext)
}

func (s *ContractPartContext) ModifierDefinition() IModifierDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifierDefinitionContext)
}

func (s *ContractPartContext) FunctionDefinition() IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *ContractPartContext) EventDefinition() IEventDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventDefinitionContext)
}

func (s *ContractPartContext) EnumDefinition() IEnumDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDefinitionContext)
}

func (s *ContractPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContractPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContractPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterContractPart(s)
	}
}

func (s *ContractPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitContractPart(s)
	}
}

func (p *SolidityParser) ContractPart() (localctx IContractPartContext) {
	localctx = NewContractPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SolidityParserRULE_contractPart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(276)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(269)
			p.StateVariableDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(270)
			p.UsingForDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(271)
			p.StructDefinition()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(272)
			p.ModifierDefinition()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(273)
			p.FunctionDefinition()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(274)
			p.EventDefinition()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(275)
			p.EnumDefinition()
		}

	}

	return localctx
}

// IStateVariableDeclarationContext is an interface to support dynamic dispatch.
type IStateVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStateVariableDeclarationContext differentiates from other interfaces.
	IsStateVariableDeclarationContext()
}

type StateVariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStateVariableDeclarationContext() *StateVariableDeclarationContext {
	var p = new(StateVariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stateVariableDeclaration
	return p
}

func (*StateVariableDeclarationContext) IsStateVariableDeclarationContext() {}

func NewStateVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StateVariableDeclarationContext {
	var p = new(StateVariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stateVariableDeclaration

	return p
}

func (s *StateVariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StateVariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StateVariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StateVariableDeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StateVariableDeclarationContext) AllPublicKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPublicKeyword)
}

func (s *StateVariableDeclarationContext) PublicKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPublicKeyword, i)
}

func (s *StateVariableDeclarationContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *StateVariableDeclarationContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *StateVariableDeclarationContext) AllPrivateKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPrivateKeyword)
}

func (s *StateVariableDeclarationContext) PrivateKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPrivateKeyword, i)
}

func (s *StateVariableDeclarationContext) AllConstantKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserConstantKeyword)
}

func (s *StateVariableDeclarationContext) ConstantKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserConstantKeyword, i)
}

func (s *StateVariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StateVariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StateVariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStateVariableDeclaration(s)
	}
}

func (s *StateVariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStateVariableDeclaration(s)
	}
}

func (p *SolidityParser) StateVariableDeclaration() (localctx IStateVariableDeclarationContext) {
	localctx = NewStateVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SolidityParserRULE_stateVariableDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(278)
		p.typeName(0)
	}
	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-102)&-(0x1f+1)) == 0 && ((1<<uint((_la-102)))&((1<<(SolidityParserConstantKeyword-102))|(1<<(SolidityParserInternalKeyword-102))|(1<<(SolidityParserPrivateKeyword-102))|(1<<(SolidityParserPublicKeyword-102)))) != 0 {
		{
			p.SetState(279)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-102)&-(0x1f+1)) == 0 && ((1<<uint((_la-102)))&((1<<(SolidityParserConstantKeyword-102))|(1<<(SolidityParserInternalKeyword-102))|(1<<(SolidityParserPrivateKeyword-102))|(1<<(SolidityParserPublicKeyword-102)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

		p.SetState(284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(285)
		p.Identifier()
	}
	p.SetState(288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__20 {
		{
			p.SetState(286)
			p.Match(SolidityParserT__20)
		}
		{
			p.SetState(287)
			p.expression(0)
		}

	}
	{
		p.SetState(290)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IUsingForDeclarationContext is an interface to support dynamic dispatch.
type IUsingForDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingForDeclarationContext differentiates from other interfaces.
	IsUsingForDeclarationContext()
}

type UsingForDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingForDeclarationContext() *UsingForDeclarationContext {
	var p = new(UsingForDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_usingForDeclaration
	return p
}

func (*UsingForDeclarationContext) IsUsingForDeclarationContext() {}

func NewUsingForDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingForDeclarationContext {
	var p = new(UsingForDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_usingForDeclaration

	return p
}

func (s *UsingForDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingForDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UsingForDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *UsingForDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingForDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingForDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterUsingForDeclaration(s)
	}
}

func (s *UsingForDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitUsingForDeclaration(s)
	}
}

func (p *SolidityParser) UsingForDeclaration() (localctx IUsingForDeclarationContext) {
	localctx = NewUsingForDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SolidityParserRULE_usingForDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(292)
		p.Match(SolidityParserT__21)
	}
	{
		p.SetState(293)
		p.Identifier()
	}
	{
		p.SetState(294)
		p.Match(SolidityParserT__22)
	}
	p.SetState(297)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__9:
		{
			p.SetState(295)
			p.Match(SolidityParserT__9)
		}

	case SolidityParserT__10, SolidityParserT__25, SolidityParserT__32, SolidityParserT__43, SolidityParserT__44, SolidityParserT__45, SolidityParserT__46, SolidityParserT__47, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserIdentifier:
		{
			p.SetState(296)
			p.typeName(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(299)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IStructDefinitionContext is an interface to support dynamic dispatch.
type IStructDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDefinitionContext differentiates from other interfaces.
	IsStructDefinitionContext()
}

type StructDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDefinitionContext() *StructDefinitionContext {
	var p = new(StructDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_structDefinition
	return p
}

func (*StructDefinitionContext) IsStructDefinitionContext() {}

func NewStructDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDefinitionContext {
	var p = new(StructDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_structDefinition

	return p
}

func (s *StructDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StructDefinitionContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *StructDefinitionContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *StructDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStructDefinition(s)
	}
}

func (s *StructDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStructDefinition(s)
	}
}

func (p *SolidityParser) StructDefinition() (localctx IStructDefinitionContext) {
	localctx = NewStructDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SolidityParserRULE_structDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(301)
		p.Match(SolidityParserT__23)
	}
	{
		p.SetState(302)
		p.Identifier()
	}
	{
		p.SetState(303)
		p.Match(SolidityParserT__11)
	}
	p.SetState(314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserT__25 || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SolidityParserT__32-33))|(1<<(SolidityParserT__43-33))|(1<<(SolidityParserT__44-33))|(1<<(SolidityParserT__45-33))|(1<<(SolidityParserT__46-33))|(1<<(SolidityParserT__47-33)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserIdentifier-88)))) != 0) {
		{
			p.SetState(304)
			p.VariableDeclaration()
		}
		{
			p.SetState(305)
			p.Match(SolidityParserT__1)
		}
		p.SetState(311)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__10 || _la == SolidityParserT__25 || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SolidityParserT__32-33))|(1<<(SolidityParserT__43-33))|(1<<(SolidityParserT__44-33))|(1<<(SolidityParserT__45-33))|(1<<(SolidityParserT__46-33))|(1<<(SolidityParserT__47-33)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserIdentifier-88)))) != 0) {
			{
				p.SetState(306)
				p.VariableDeclaration()
			}
			{
				p.SetState(307)
				p.Match(SolidityParserT__1)
			}

			p.SetState(313)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(316)
		p.Match(SolidityParserT__13)
	}

	return localctx
}

// IModifierDefinitionContext is an interface to support dynamic dispatch.
type IModifierDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierDefinitionContext differentiates from other interfaces.
	IsModifierDefinitionContext()
}

type ModifierDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierDefinitionContext() *ModifierDefinitionContext {
	var p = new(ModifierDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierDefinition
	return p
}

func (*ModifierDefinitionContext) IsModifierDefinitionContext() {}

func NewModifierDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierDefinitionContext {
	var p = new(ModifierDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierDefinition

	return p
}

func (s *ModifierDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModifierDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ModifierDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ModifierDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterModifierDefinition(s)
	}
}

func (s *ModifierDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitModifierDefinition(s)
	}
}

func (p *SolidityParser) ModifierDefinition() (localctx IModifierDefinitionContext) {
	localctx = NewModifierDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SolidityParserRULE_modifierDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(318)
		p.Match(SolidityParserT__24)
	}
	{
		p.SetState(319)
		p.Identifier()
	}
	p.SetState(321)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__18 {
		{
			p.SetState(320)
			p.ParameterList()
		}

	}
	{
		p.SetState(323)
		p.Block()
	}

	return localctx
}

// IModifierInvocationContext is an interface to support dynamic dispatch.
type IModifierInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierInvocationContext differentiates from other interfaces.
	IsModifierInvocationContext()
}

type ModifierInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierInvocationContext() *ModifierInvocationContext {
	var p = new(ModifierInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierInvocation
	return p
}

func (*ModifierInvocationContext) IsModifierInvocationContext() {}

func NewModifierInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierInvocationContext {
	var p = new(ModifierInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierInvocation

	return p
}

func (s *ModifierInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierInvocationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModifierInvocationContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ModifierInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterModifierInvocation(s)
	}
}

func (s *ModifierInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitModifierInvocation(s)
	}
}

func (p *SolidityParser) ModifierInvocation() (localctx IModifierInvocationContext) {
	localctx = NewModifierInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SolidityParserRULE_modifierInvocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(325)
		p.Identifier()
	}
	p.SetState(331)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__18 {
		{
			p.SetState(326)
			p.Match(SolidityParserT__18)
		}
		p.SetState(328)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
			{
				p.SetState(327)
				p.ExpressionList()
			}

		}
		{
			p.SetState(330)
			p.Match(SolidityParserT__19)
		}

	}

	return localctx
}

// IFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDefinitionContext differentiates from other interfaces.
	IsFunctionDefinitionContext()
}

type FunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDefinitionContext() *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionDefinition
	return p
}

func (*FunctionDefinitionContext) IsFunctionDefinitionContext() {}

func NewFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionDefinition

	return p
}

func (s *FunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *FunctionDefinitionContext) ModifierList() IModifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifierListContext)
}

func (s *FunctionDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionDefinitionContext) ReturnParameters() IReturnParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnParametersContext)
}

func (s *FunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionDefinition(s)
	}
}

func (s *FunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionDefinition(s)
	}
}

func (p *SolidityParser) FunctionDefinition() (localctx IFunctionDefinitionContext) {
	localctx = NewFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SolidityParserRULE_functionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(333)
		p.Match(SolidityParserT__25)
	}
	p.SetState(335)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserIdentifier {
		{
			p.SetState(334)
			p.Identifier()
		}

	}
	{
		p.SetState(337)
		p.ParameterList()
	}
	{
		p.SetState(338)
		p.ModifierList()
	}
	p.SetState(340)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__26 {
		{
			p.SetState(339)
			p.ReturnParameters()
		}

	}
	p.SetState(344)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__1:
		{
			p.SetState(342)
			p.Match(SolidityParserT__1)
		}

	case SolidityParserT__11:
		{
			p.SetState(343)
			p.Block()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IReturnParametersContext is an interface to support dynamic dispatch.
type IReturnParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnParametersContext differentiates from other interfaces.
	IsReturnParametersContext()
}

type ReturnParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnParametersContext() *ReturnParametersContext {
	var p = new(ReturnParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_returnParameters
	return p
}

func (*ReturnParametersContext) IsReturnParametersContext() {}

func NewReturnParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnParametersContext {
	var p = new(ReturnParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_returnParameters

	return p
}

func (s *ReturnParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnParametersContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ReturnParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterReturnParameters(s)
	}
}

func (s *ReturnParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitReturnParameters(s)
	}
}

func (p *SolidityParser) ReturnParameters() (localctx IReturnParametersContext) {
	localctx = NewReturnParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SolidityParserRULE_returnParameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(346)
		p.Match(SolidityParserT__26)
	}
	{
		p.SetState(347)
		p.ParameterList()
	}

	return localctx
}

// IModifierListContext is an interface to support dynamic dispatch.
type IModifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierListContext differentiates from other interfaces.
	IsModifierListContext()
}

type ModifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierListContext() *ModifierListContext {
	var p = new(ModifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierList
	return p
}

func (*ModifierListContext) IsModifierListContext() {}

func NewModifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierListContext {
	var p = new(ModifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierList

	return p
}

func (s *ModifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierListContext) AllModifierInvocation() []IModifierInvocationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem())
	var tst = make([]IModifierInvocationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModifierInvocationContext)
		}
	}

	return tst
}

func (s *ModifierListContext) ModifierInvocation(i int) IModifierInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModifierInvocationContext)
}

func (s *ModifierListContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *ModifierListContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *ModifierListContext) AllExternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserExternalKeyword)
}

func (s *ModifierListContext) ExternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserExternalKeyword, i)
}

func (s *ModifierListContext) AllPublicKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPublicKeyword)
}

func (s *ModifierListContext) PublicKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPublicKeyword, i)
}

func (s *ModifierListContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *ModifierListContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *ModifierListContext) AllPrivateKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPrivateKeyword)
}

func (s *ModifierListContext) PrivateKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPrivateKeyword, i)
}

func (s *ModifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterModifierList(s)
	}
}

func (s *ModifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitModifierList(s)
	}
}

func (p *SolidityParser) ModifierList() (localctx IModifierListContext) {
	localctx = NewModifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SolidityParserRULE_modifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(357)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__10 || (((_la-102)&-(0x1f+1)) == 0 && ((1<<uint((_la-102)))&((1<<(SolidityParserConstantKeyword-102))|(1<<(SolidityParserExternalKeyword-102))|(1<<(SolidityParserInternalKeyword-102))|(1<<(SolidityParserPayableKeyword-102))|(1<<(SolidityParserPrivateKeyword-102))|(1<<(SolidityParserPublicKeyword-102))|(1<<(SolidityParserPureKeyword-102))|(1<<(SolidityParserViewKeyword-102))|(1<<(SolidityParserIdentifier-102)))) != 0) {
		p.SetState(355)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserT__10, SolidityParserIdentifier:
			{
				p.SetState(349)
				p.ModifierInvocation()
			}

		case SolidityParserConstantKeyword, SolidityParserPayableKeyword, SolidityParserPureKeyword, SolidityParserViewKeyword:
			{
				p.SetState(350)
				p.StateMutability()
			}

		case SolidityParserExternalKeyword:
			{
				p.SetState(351)
				p.Match(SolidityParserExternalKeyword)
			}

		case SolidityParserPublicKeyword:
			{
				p.SetState(352)
				p.Match(SolidityParserPublicKeyword)
			}

		case SolidityParserInternalKeyword:
			{
				p.SetState(353)
				p.Match(SolidityParserInternalKeyword)
			}

		case SolidityParserPrivateKeyword:
			{
				p.SetState(354)
				p.Match(SolidityParserPrivateKeyword)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(359)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IEventDefinitionContext is an interface to support dynamic dispatch.
type IEventDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventDefinitionContext differentiates from other interfaces.
	IsEventDefinitionContext()
}

type EventDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventDefinitionContext() *EventDefinitionContext {
	var p = new(EventDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventDefinition
	return p
}

func (*EventDefinitionContext) IsEventDefinitionContext() {}

func NewEventDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventDefinitionContext {
	var p = new(EventDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventDefinition

	return p
}

func (s *EventDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EventDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventDefinitionContext) EventParameterList() IEventParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventParameterListContext)
}

func (s *EventDefinitionContext) AnonymousKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserAnonymousKeyword, 0)
}

func (s *EventDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEventDefinition(s)
	}
}

func (s *EventDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEventDefinition(s)
	}
}

func (p *SolidityParser) EventDefinition() (localctx IEventDefinitionContext) {
	localctx = NewEventDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SolidityParserRULE_eventDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(360)
		p.Match(SolidityParserT__27)
	}
	{
		p.SetState(361)
		p.Identifier()
	}
	{
		p.SetState(362)
		p.EventParameterList()
	}
	p.SetState(364)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserAnonymousKeyword {
		{
			p.SetState(363)
			p.Match(SolidityParserAnonymousKeyword)
		}

	}
	{
		p.SetState(366)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IEnumValueContext is an interface to support dynamic dispatch.
type IEnumValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumValueContext differentiates from other interfaces.
	IsEnumValueContext()
}

type EnumValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumValueContext() *EnumValueContext {
	var p = new(EnumValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_enumValue
	return p
}

func (*EnumValueContext) IsEnumValueContext() {}

func NewEnumValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumValueContext {
	var p = new(EnumValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_enumValue

	return p
}

func (s *EnumValueContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumValueContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEnumValue(s)
	}
}

func (s *EnumValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEnumValue(s)
	}
}

func (p *SolidityParser) EnumValue() (localctx IEnumValueContext) {
	localctx = NewEnumValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SolidityParserRULE_enumValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(368)
		p.Identifier()
	}

	return localctx
}

// IEnumDefinitionContext is an interface to support dynamic dispatch.
type IEnumDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumDefinitionContext differentiates from other interfaces.
	IsEnumDefinitionContext()
}

type EnumDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDefinitionContext() *EnumDefinitionContext {
	var p = new(EnumDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_enumDefinition
	return p
}

func (*EnumDefinitionContext) IsEnumDefinitionContext() {}

func NewEnumDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDefinitionContext {
	var p = new(EnumDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_enumDefinition

	return p
}

func (s *EnumDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumDefinitionContext) AllEnumValue() []IEnumValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumValueContext)(nil)).Elem())
	var tst = make([]IEnumValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumValueContext)
		}
	}

	return tst
}

func (s *EnumDefinitionContext) EnumValue(i int) IEnumValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumValueContext)
}

func (s *EnumDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEnumDefinition(s)
	}
}

func (s *EnumDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEnumDefinition(s)
	}
}

func (p *SolidityParser) EnumDefinition() (localctx IEnumDefinitionContext) {
	localctx = NewEnumDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SolidityParserRULE_enumDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(370)
		p.Match(SolidityParserT__28)
	}
	{
		p.SetState(371)
		p.Identifier()
	}
	{
		p.SetState(372)
		p.Match(SolidityParserT__11)
	}
	p.SetState(374)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserIdentifier {
		{
			p.SetState(373)
			p.EnumValue()
		}

	}
	p.SetState(380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__12 {
		{
			p.SetState(376)
			p.Match(SolidityParserT__12)
		}
		{
			p.SetState(377)
			p.EnumValue()
		}

		p.SetState(382)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(383)
		p.Match(SolidityParserT__13)
	}

	return localctx
}

// IParameterListContext is an interface to support dynamic dispatch.
type IParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterListContext differentiates from other interfaces.
	IsParameterListContext()
}

type ParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterListContext() *ParameterListContext {
	var p = new(ParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_parameterList
	return p
}

func (*ParameterListContext) IsParameterListContext() {}

func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterListContext {
	var p = new(ParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_parameterList

	return p
}

func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterListContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterListContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterParameterList(s)
	}
}

func (s *ParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitParameterList(s)
	}
}

func (p *SolidityParser) ParameterList() (localctx IParameterListContext) {
	localctx = NewParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SolidityParserRULE_parameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(385)
		p.Match(SolidityParserT__18)
	}
	p.SetState(394)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserT__25 || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SolidityParserT__32-33))|(1<<(SolidityParserT__43-33))|(1<<(SolidityParserT__44-33))|(1<<(SolidityParserT__45-33))|(1<<(SolidityParserT__46-33))|(1<<(SolidityParserT__47-33)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserIdentifier-88)))) != 0) {
		{
			p.SetState(386)
			p.Parameter()
		}
		p.SetState(391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 {
			{
				p.SetState(387)
				p.Match(SolidityParserT__12)
			}
			{
				p.SetState(388)
				p.Parameter()
			}

			p.SetState(393)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(396)
		p.Match(SolidityParserT__19)
	}

	return localctx
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ParameterContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *ParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterParameter(s)
	}
}

func (s *ParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitParameter(s)
	}
}

func (p *SolidityParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SolidityParserRULE_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(398)
		p.typeName(0)
	}
	p.SetState(400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__34 || _la == SolidityParserT__35 {
		{
			p.SetState(399)
			p.StorageLocation()
		}

	}
	p.SetState(403)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserIdentifier {
		{
			p.SetState(402)
			p.Identifier()
		}

	}

	return localctx
}

// IEventParameterListContext is an interface to support dynamic dispatch.
type IEventParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventParameterListContext differentiates from other interfaces.
	IsEventParameterListContext()
}

type EventParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventParameterListContext() *EventParameterListContext {
	var p = new(EventParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventParameterList
	return p
}

func (*EventParameterListContext) IsEventParameterListContext() {}

func NewEventParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventParameterListContext {
	var p = new(EventParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventParameterList

	return p
}

func (s *EventParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *EventParameterListContext) AllEventParameter() []IEventParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEventParameterContext)(nil)).Elem())
	var tst = make([]IEventParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEventParameterContext)
		}
	}

	return tst
}

func (s *EventParameterListContext) EventParameter(i int) IEventParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEventParameterContext)
}

func (s *EventParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEventParameterList(s)
	}
}

func (s *EventParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEventParameterList(s)
	}
}

func (p *SolidityParser) EventParameterList() (localctx IEventParameterListContext) {
	localctx = NewEventParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SolidityParserRULE_eventParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(405)
		p.Match(SolidityParserT__18)
	}
	p.SetState(414)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserT__25 || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SolidityParserT__32-33))|(1<<(SolidityParserT__43-33))|(1<<(SolidityParserT__44-33))|(1<<(SolidityParserT__45-33))|(1<<(SolidityParserT__46-33))|(1<<(SolidityParserT__47-33)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserIdentifier-88)))) != 0) {
		{
			p.SetState(406)
			p.EventParameter()
		}
		p.SetState(411)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 {
			{
				p.SetState(407)
				p.Match(SolidityParserT__12)
			}
			{
				p.SetState(408)
				p.EventParameter()
			}

			p.SetState(413)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(416)
		p.Match(SolidityParserT__19)
	}

	return localctx
}

// IEventParameterContext is an interface to support dynamic dispatch.
type IEventParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventParameterContext differentiates from other interfaces.
	IsEventParameterContext()
}

type EventParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventParameterContext() *EventParameterContext {
	var p = new(EventParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventParameter
	return p
}

func (*EventParameterContext) IsEventParameterContext() {}

func NewEventParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventParameterContext {
	var p = new(EventParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventParameter

	return p
}

func (s *EventParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *EventParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *EventParameterContext) IndexedKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserIndexedKeyword, 0)
}

func (s *EventParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEventParameter(s)
	}
}

func (s *EventParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEventParameter(s)
	}
}

func (p *SolidityParser) EventParameter() (localctx IEventParameterContext) {
	localctx = NewEventParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SolidityParserRULE_eventParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(418)
		p.typeName(0)
	}
	p.SetState(420)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserIndexedKeyword {
		{
			p.SetState(419)
			p.Match(SolidityParserIndexedKeyword)
		}

	}
	p.SetState(423)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserIdentifier {
		{
			p.SetState(422)
			p.Identifier()
		}

	}

	return localctx
}

// IFunctionTypeParameterListContext is an interface to support dynamic dispatch.
type IFunctionTypeParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeParameterListContext differentiates from other interfaces.
	IsFunctionTypeParameterListContext()
}

type FunctionTypeParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeParameterListContext() *FunctionTypeParameterListContext {
	var p = new(FunctionTypeParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeParameterList
	return p
}

func (*FunctionTypeParameterListContext) IsFunctionTypeParameterListContext() {}

func NewFunctionTypeParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeParameterListContext {
	var p = new(FunctionTypeParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeParameterList

	return p
}

func (s *FunctionTypeParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeParameterListContext) AllFunctionTypeParameter() []IFunctionTypeParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionTypeParameterContext)(nil)).Elem())
	var tst = make([]IFunctionTypeParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionTypeParameterContext)
		}
	}

	return tst
}

func (s *FunctionTypeParameterListContext) FunctionTypeParameter(i int) IFunctionTypeParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeParameterContext)
}

func (s *FunctionTypeParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionTypeParameterList(s)
	}
}

func (s *FunctionTypeParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionTypeParameterList(s)
	}
}

func (p *SolidityParser) FunctionTypeParameterList() (localctx IFunctionTypeParameterListContext) {
	localctx = NewFunctionTypeParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SolidityParserRULE_functionTypeParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(425)
		p.Match(SolidityParserT__18)
	}
	p.SetState(434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserT__25 || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SolidityParserT__32-33))|(1<<(SolidityParserT__43-33))|(1<<(SolidityParserT__44-33))|(1<<(SolidityParserT__45-33))|(1<<(SolidityParserT__46-33))|(1<<(SolidityParserT__47-33)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserIdentifier-88)))) != 0) {
		{
			p.SetState(426)
			p.FunctionTypeParameter()
		}
		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 {
			{
				p.SetState(427)
				p.Match(SolidityParserT__12)
			}
			{
				p.SetState(428)
				p.FunctionTypeParameter()
			}

			p.SetState(433)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(436)
		p.Match(SolidityParserT__19)
	}

	return localctx
}

// IFunctionTypeParameterContext is an interface to support dynamic dispatch.
type IFunctionTypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeParameterContext differentiates from other interfaces.
	IsFunctionTypeParameterContext()
}

type FunctionTypeParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeParameterContext() *FunctionTypeParameterContext {
	var p = new(FunctionTypeParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeParameter
	return p
}

func (*FunctionTypeParameterContext) IsFunctionTypeParameterContext() {}

func NewFunctionTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeParameterContext {
	var p = new(FunctionTypeParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeParameter

	return p
}

func (s *FunctionTypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *FunctionTypeParameterContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *FunctionTypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionTypeParameter(s)
	}
}

func (s *FunctionTypeParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionTypeParameter(s)
	}
}

func (p *SolidityParser) FunctionTypeParameter() (localctx IFunctionTypeParameterContext) {
	localctx = NewFunctionTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SolidityParserRULE_functionTypeParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(438)
		p.typeName(0)
	}
	p.SetState(440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__34 || _la == SolidityParserT__35 {
		{
			p.SetState(439)
			p.StorageLocation()
		}

	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *VariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *VariableDeclarationContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVariableDeclaration(s)
	}
}

func (s *VariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVariableDeclaration(s)
	}
}

func (p *SolidityParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SolidityParserRULE_variableDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(442)
		p.typeName(0)
	}
	p.SetState(444)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__34 || _la == SolidityParserT__35 {
		{
			p.SetState(443)
			p.StorageLocation()
		}

	}
	{
		p.SetState(446)
		p.Identifier()
	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *TypeNameContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *TypeNameContext) Mapping() IMappingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMappingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMappingContext)
}

func (s *TypeNameContext) FunctionTypeName() IFunctionTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameContext)
}

func (s *TypeNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeNameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterTypeName(s)
	}
}

func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitTypeName(s)
	}
}

func (p *SolidityParser) TypeName() (localctx ITypeNameContext) {
	return p.typeName(0)
}

func (p *SolidityParser) typeName(_p int) (localctx ITypeNameContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITypeNameContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 60
	p.EnterRecursionRule(localctx, 60, SolidityParserRULE_typeName, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(453)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__43, SolidityParserT__44, SolidityParserT__45, SolidityParserT__46, SolidityParserT__47, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed:
		{
			p.SetState(449)
			p.ElementaryTypeName()
		}

	case SolidityParserT__10, SolidityParserIdentifier:
		{
			p.SetState(450)
			p.UserDefinedTypeName()
		}

	case SolidityParserT__32:
		{
			p.SetState(451)
			p.Mapping()
		}

	case SolidityParserT__25:
		{
			p.SetState(452)
			p.FunctionTypeName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(463)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTypeNameContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_typeName)
			p.SetState(455)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(456)
				p.Match(SolidityParserT__29)
			}
			p.SetState(458)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
				{
					p.SetState(457)
					p.expression(0)
				}

			}
			{
				p.SetState(460)
				p.Match(SolidityParserT__30)
			}

		}
		p.SetState(465)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext())
	}

	return localctx
}

// IUserDefinedTypeNameContext is an interface to support dynamic dispatch.
type IUserDefinedTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserDefinedTypeNameContext differentiates from other interfaces.
	IsUserDefinedTypeNameContext()
}

type UserDefinedTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserDefinedTypeNameContext() *UserDefinedTypeNameContext {
	var p = new(UserDefinedTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_userDefinedTypeName
	return p
}

func (*UserDefinedTypeNameContext) IsUserDefinedTypeNameContext() {}

func NewUserDefinedTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserDefinedTypeNameContext {
	var p = new(UserDefinedTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_userDefinedTypeName

	return p
}

func (s *UserDefinedTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserDefinedTypeNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *UserDefinedTypeNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UserDefinedTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserDefinedTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserDefinedTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterUserDefinedTypeName(s)
	}
}

func (s *UserDefinedTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitUserDefinedTypeName(s)
	}
}

func (p *SolidityParser) UserDefinedTypeName() (localctx IUserDefinedTypeNameContext) {
	localctx = NewUserDefinedTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SolidityParserRULE_userDefinedTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(466)
		p.Identifier()
	}
	p.SetState(471)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(467)
				p.Match(SolidityParserT__31)
			}
			{
				p.SetState(468)
				p.Identifier()
			}

		}
		p.SetState(473)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())
	}

	return localctx
}

// IMappingContext is an interface to support dynamic dispatch.
type IMappingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMappingContext differentiates from other interfaces.
	IsMappingContext()
}

type MappingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMappingContext() *MappingContext {
	var p = new(MappingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_mapping
	return p
}

func (*MappingContext) IsMappingContext() {}

func NewMappingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MappingContext {
	var p = new(MappingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_mapping

	return p
}

func (s *MappingContext) GetParser() antlr.Parser { return s.parser }

func (s *MappingContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *MappingContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MappingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MappingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MappingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterMapping(s)
	}
}

func (s *MappingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitMapping(s)
	}
}

func (p *SolidityParser) Mapping() (localctx IMappingContext) {
	localctx = NewMappingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SolidityParserRULE_mapping)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(474)
		p.Match(SolidityParserT__32)
	}
	{
		p.SetState(475)
		p.Match(SolidityParserT__18)
	}
	{
		p.SetState(476)
		p.ElementaryTypeName()
	}
	{
		p.SetState(477)
		p.Match(SolidityParserT__33)
	}
	{
		p.SetState(478)
		p.typeName(0)
	}
	{
		p.SetState(479)
		p.Match(SolidityParserT__19)
	}

	return localctx
}

// IFunctionTypeNameContext is an interface to support dynamic dispatch.
type IFunctionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameContext differentiates from other interfaces.
	IsFunctionTypeNameContext()
}

type FunctionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameContext() *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeName
	return p
}

func (*FunctionTypeNameContext) IsFunctionTypeNameContext() {}

func NewFunctionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeName

	return p
}

func (s *FunctionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameContext) AllFunctionTypeParameterList() []IFunctionTypeParameterListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionTypeParameterListContext)(nil)).Elem())
	var tst = make([]IFunctionTypeParameterListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionTypeParameterListContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) FunctionTypeParameterList(i int) IFunctionTypeParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeParameterListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeParameterListContext)
}

func (s *FunctionTypeNameContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *FunctionTypeNameContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *FunctionTypeNameContext) AllExternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserExternalKeyword)
}

func (s *FunctionTypeNameContext) ExternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserExternalKeyword, i)
}

func (s *FunctionTypeNameContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *FunctionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionTypeName(s)
	}
}

func (s *FunctionTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionTypeName(s)
	}
}

func (p *SolidityParser) FunctionTypeName() (localctx IFunctionTypeNameContext) {
	localctx = NewFunctionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SolidityParserRULE_functionTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(481)
		p.Match(SolidityParserT__25)
	}
	{
		p.SetState(482)
		p.FunctionTypeParameterList()
	}
	p.SetState(488)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(486)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SolidityParserInternalKeyword:
				{
					p.SetState(483)
					p.Match(SolidityParserInternalKeyword)
				}

			case SolidityParserExternalKeyword:
				{
					p.SetState(484)
					p.Match(SolidityParserExternalKeyword)
				}

			case SolidityParserConstantKeyword, SolidityParserPayableKeyword, SolidityParserPureKeyword, SolidityParserViewKeyword:
				{
					p.SetState(485)
					p.StateMutability()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(490)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())
	}
	p.SetState(493)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(491)
			p.Match(SolidityParserT__26)
		}
		{
			p.SetState(492)
			p.FunctionTypeParameterList()
		}

	}

	return localctx
}

// IStorageLocationContext is an interface to support dynamic dispatch.
type IStorageLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorageLocationContext differentiates from other interfaces.
	IsStorageLocationContext()
}

type StorageLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorageLocationContext() *StorageLocationContext {
	var p = new(StorageLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_storageLocation
	return p
}

func (*StorageLocationContext) IsStorageLocationContext() {}

func NewStorageLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StorageLocationContext {
	var p = new(StorageLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_storageLocation

	return p
}

func (s *StorageLocationContext) GetParser() antlr.Parser { return s.parser }
func (s *StorageLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StorageLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStorageLocation(s)
	}
}

func (s *StorageLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStorageLocation(s)
	}
}

func (p *SolidityParser) StorageLocation() (localctx IStorageLocationContext) {
	localctx = NewStorageLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SolidityParserRULE_storageLocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(495)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserT__34 || _la == SolidityParserT__35) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStateMutabilityContext is an interface to support dynamic dispatch.
type IStateMutabilityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStateMutabilityContext differentiates from other interfaces.
	IsStateMutabilityContext()
}

type StateMutabilityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStateMutabilityContext() *StateMutabilityContext {
	var p = new(StateMutabilityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stateMutability
	return p
}

func (*StateMutabilityContext) IsStateMutabilityContext() {}

func NewStateMutabilityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StateMutabilityContext {
	var p = new(StateMutabilityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stateMutability

	return p
}

func (s *StateMutabilityContext) GetParser() antlr.Parser { return s.parser }

func (s *StateMutabilityContext) PureKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPureKeyword, 0)
}

func (s *StateMutabilityContext) ConstantKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserConstantKeyword, 0)
}

func (s *StateMutabilityContext) ViewKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserViewKeyword, 0)
}

func (s *StateMutabilityContext) PayableKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayableKeyword, 0)
}

func (s *StateMutabilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StateMutabilityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StateMutabilityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStateMutability(s)
	}
}

func (s *StateMutabilityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStateMutability(s)
	}
}

func (p *SolidityParser) StateMutability() (localctx IStateMutabilityContext) {
	localctx = NewStateMutabilityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SolidityParserRULE_stateMutability)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(497)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-102)&-(0x1f+1)) == 0 && ((1<<uint((_la-102)))&((1<<(SolidityParserConstantKeyword-102))|(1<<(SolidityParserPayableKeyword-102))|(1<<(SolidityParserPureKeyword-102))|(1<<(SolidityParserViewKeyword-102)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *BlockContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *SolidityParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SolidityParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(499)
		p.Match(SolidityParserT__11)
	}
	p.SetState(503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__11)|(1<<SolidityParserT__18)|(1<<SolidityParserT__22)|(1<<SolidityParserT__25)|(1<<SolidityParserT__29))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SolidityParserT__32-33))|(1<<(SolidityParserT__36-33))|(1<<(SolidityParserT__38-33))|(1<<(SolidityParserT__39-33))|(1<<(SolidityParserT__40-33))|(1<<(SolidityParserT__41-33))|(1<<(SolidityParserT__42-33))|(1<<(SolidityParserT__43-33))|(1<<(SolidityParserT__44-33))|(1<<(SolidityParserT__45-33))|(1<<(SolidityParserT__46-33))|(1<<(SolidityParserT__47-33))|(1<<(SolidityParserT__48-33))|(1<<(SolidityParserT__49-33))|(1<<(SolidityParserT__50-33))|(1<<(SolidityParserT__51-33))|(1<<(SolidityParserT__52-33))|(1<<(SolidityParserT__53-33))|(1<<(SolidityParserT__54-33))|(1<<(SolidityParserT__55-33))|(1<<(SolidityParserT__56-33)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserBreakKeyword-88))|(1<<(SolidityParserContinueKeyword-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
		{
			p.SetState(500)
			p.Statement()
		}

		p.SetState(505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(506)
		p.Match(SolidityParserT__13)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *StatementContext) ForStatement() IForStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *StatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) InlineAssemblyStatement() IInlineAssemblyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInlineAssemblyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInlineAssemblyStatementContext)
}

func (s *StatementContext) DoWhileStatement() IDoWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDoWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDoWhileStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) ThrowStatement() IThrowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatementContext)
}

func (s *StatementContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *SolidityParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SolidityParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(519)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__36:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(508)
			p.IfStatement()
		}

	case SolidityParserT__38:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(509)
			p.WhileStatement()
		}

	case SolidityParserT__22:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(510)
			p.ForStatement()
		}

	case SolidityParserT__11:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(511)
			p.Block()
		}

	case SolidityParserT__39:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(512)
			p.InlineAssemblyStatement()
		}

	case SolidityParserT__40:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(513)
			p.DoWhileStatement()
		}

	case SolidityParserContinueKeyword:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(514)
			p.ContinueStatement()
		}

	case SolidityParserBreakKeyword:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(515)
			p.BreakStatement()
		}

	case SolidityParserT__41:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(516)
			p.ReturnStatement()
		}

	case SolidityParserT__42:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(517)
			p.ThrowStatement()
		}

	case SolidityParserT__10, SolidityParserT__18, SolidityParserT__25, SolidityParserT__29, SolidityParserT__32, SolidityParserT__43, SolidityParserT__44, SolidityParserT__45, SolidityParserT__46, SolidityParserT__47, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserT__52, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserIdentifier, SolidityParserStringLiteral:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(518)
			p.SimpleStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitExpressionStatement(s)
	}
}

func (p *SolidityParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SolidityParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(521)
		p.expression(0)
	}
	{
		p.SetState(522)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (p *SolidityParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SolidityParserRULE_ifStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(524)
		p.Match(SolidityParserT__36)
	}
	{
		p.SetState(525)
		p.Match(SolidityParserT__18)
	}
	{
		p.SetState(526)
		p.expression(0)
	}
	{
		p.SetState(527)
		p.Match(SolidityParserT__19)
	}
	{
		p.SetState(528)
		p.Statement()
	}
	p.SetState(531)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(529)
			p.Match(SolidityParserT__37)
		}
		{
			p.SetState(530)
			p.Statement()
		}

	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (p *SolidityParser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SolidityParserRULE_whileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(533)
		p.Match(SolidityParserT__38)
	}
	{
		p.SetState(534)
		p.Match(SolidityParserT__18)
	}
	{
		p.SetState(535)
		p.expression(0)
	}
	{
		p.SetState(536)
		p.Match(SolidityParserT__19)
	}
	{
		p.SetState(537)
		p.Statement()
	}

	return localctx
}

// ISimpleStatementContext is an interface to support dynamic dispatch.
type ISimpleStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleStatementContext differentiates from other interfaces.
	IsSimpleStatementContext()
}

type SimpleStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStatementContext() *SimpleStatementContext {
	var p = new(SimpleStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_simpleStatement
	return p
}

func (*SimpleStatementContext) IsSimpleStatementContext() {}

func NewSimpleStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStatementContext {
	var p = new(SimpleStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_simpleStatement

	return p
}

func (s *SimpleStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStatementContext) VariableDeclarationStatement() IVariableDeclarationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationStatementContext)
}

func (s *SimpleStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *SimpleStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterSimpleStatement(s)
	}
}

func (s *SimpleStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitSimpleStatement(s)
	}
}

func (p *SolidityParser) SimpleStatement() (localctx ISimpleStatementContext) {
	localctx = NewSimpleStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SolidityParserRULE_simpleStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(541)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(539)
			p.VariableDeclarationStatement()
		}

	case 2:
		{
			p.SetState(540)
			p.ExpressionStatement()
		}

	}

	return localctx
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_forStatement
	return p
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForStatementContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *ForStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ForStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterForStatement(s)
	}
}

func (s *ForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitForStatement(s)
	}
}

func (p *SolidityParser) ForStatement() (localctx IForStatementContext) {
	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SolidityParserRULE_forStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(543)
		p.Match(SolidityParserT__22)
	}
	{
		p.SetState(544)
		p.Match(SolidityParserT__18)
	}
	p.SetState(547)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__10, SolidityParserT__18, SolidityParserT__25, SolidityParserT__29, SolidityParserT__32, SolidityParserT__43, SolidityParserT__44, SolidityParserT__45, SolidityParserT__46, SolidityParserT__47, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserT__52, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserIdentifier, SolidityParserStringLiteral:
		{
			p.SetState(545)
			p.SimpleStatement()
		}

	case SolidityParserT__1:
		{
			p.SetState(546)
			p.Match(SolidityParserT__1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(550)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
		{
			p.SetState(549)
			p.expression(0)
		}

	}
	{
		p.SetState(552)
		p.Match(SolidityParserT__1)
	}
	p.SetState(554)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
		{
			p.SetState(553)
			p.expression(0)
		}

	}
	{
		p.SetState(556)
		p.Match(SolidityParserT__19)
	}
	{
		p.SetState(557)
		p.Statement()
	}

	return localctx
}

// IInlineAssemblyStatementContext is an interface to support dynamic dispatch.
type IInlineAssemblyStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInlineAssemblyStatementContext differentiates from other interfaces.
	IsInlineAssemblyStatementContext()
}

type InlineAssemblyStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInlineAssemblyStatementContext() *InlineAssemblyStatementContext {
	var p = new(InlineAssemblyStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inlineAssemblyStatement
	return p
}

func (*InlineAssemblyStatementContext) IsInlineAssemblyStatementContext() {}

func NewInlineAssemblyStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InlineAssemblyStatementContext {
	var p = new(InlineAssemblyStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inlineAssemblyStatement

	return p
}

func (s *InlineAssemblyStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InlineAssemblyStatementContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *InlineAssemblyStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *InlineAssemblyStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineAssemblyStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InlineAssemblyStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterInlineAssemblyStatement(s)
	}
}

func (s *InlineAssemblyStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitInlineAssemblyStatement(s)
	}
}

func (p *SolidityParser) InlineAssemblyStatement() (localctx IInlineAssemblyStatementContext) {
	localctx = NewInlineAssemblyStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SolidityParserRULE_inlineAssemblyStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(559)
		p.Match(SolidityParserT__39)
	}
	p.SetState(561)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserStringLiteral {
		{
			p.SetState(560)
			p.Match(SolidityParserStringLiteral)
		}

	}
	{
		p.SetState(563)
		p.AssemblyBlock()
	}

	return localctx
}

// IDoWhileStatementContext is an interface to support dynamic dispatch.
type IDoWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoWhileStatementContext differentiates from other interfaces.
	IsDoWhileStatementContext()
}

type DoWhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoWhileStatementContext() *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_doWhileStatement
	return p
}

func (*DoWhileStatementContext) IsDoWhileStatementContext() {}

func NewDoWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_doWhileStatement

	return p
}

func (s *DoWhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoWhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *DoWhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DoWhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoWhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoWhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterDoWhileStatement(s)
	}
}

func (s *DoWhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitDoWhileStatement(s)
	}
}

func (p *SolidityParser) DoWhileStatement() (localctx IDoWhileStatementContext) {
	localctx = NewDoWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SolidityParserRULE_doWhileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(565)
		p.Match(SolidityParserT__40)
	}
	{
		p.SetState(566)
		p.Statement()
	}
	{
		p.SetState(567)
		p.Match(SolidityParserT__38)
	}
	{
		p.SetState(568)
		p.Match(SolidityParserT__18)
	}
	{
		p.SetState(569)
		p.expression(0)
	}
	{
		p.SetState(570)
		p.Match(SolidityParserT__19)
	}
	{
		p.SetState(571)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterContinueStatement(s)
	}
}

func (s *ContinueStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitContinueStatement(s)
	}
}

func (p *SolidityParser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SolidityParserRULE_continueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(573)
		p.Match(SolidityParserContinueKeyword)
	}
	{
		p.SetState(574)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterBreakStatement(s)
	}
}

func (s *BreakStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitBreakStatement(s)
	}
}

func (p *SolidityParser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SolidityParserRULE_breakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(576)
		p.Match(SolidityParserBreakKeyword)
	}
	{
		p.SetState(577)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (p *SolidityParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SolidityParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(579)
		p.Match(SolidityParserT__41)
	}
	p.SetState(581)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
		{
			p.SetState(580)
			p.expression(0)
		}

	}
	{
		p.SetState(583)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IThrowStatementContext is an interface to support dynamic dispatch.
type IThrowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatementContext differentiates from other interfaces.
	IsThrowStatementContext()
}

type ThrowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatementContext() *ThrowStatementContext {
	var p = new(ThrowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_throwStatement
	return p
}

func (*ThrowStatementContext) IsThrowStatementContext() {}

func NewThrowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatementContext {
	var p = new(ThrowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_throwStatement

	return p
}

func (s *ThrowStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *ThrowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterThrowStatement(s)
	}
}

func (s *ThrowStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitThrowStatement(s)
	}
}

func (p *SolidityParser) ThrowStatement() (localctx IThrowStatementContext) {
	localctx = NewThrowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SolidityParserRULE_throwStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(585)
		p.Match(SolidityParserT__42)
	}
	{
		p.SetState(586)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IVariableDeclarationStatementContext is an interface to support dynamic dispatch.
type IVariableDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationStatementContext differentiates from other interfaces.
	IsVariableDeclarationStatementContext()
}

type VariableDeclarationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationStatementContext() *VariableDeclarationStatementContext {
	var p = new(VariableDeclarationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclarationStatement
	return p
}

func (*VariableDeclarationStatementContext) IsVariableDeclarationStatementContext() {}

func NewVariableDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationStatementContext {
	var p = new(VariableDeclarationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclarationStatement

	return p
}

func (s *VariableDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationStatementContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *VariableDeclarationStatementContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVariableDeclarationStatement(s)
	}
}

func (s *VariableDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVariableDeclarationStatement(s)
	}
}

func (p *SolidityParser) VariableDeclarationStatement() (localctx IVariableDeclarationStatementContext) {
	localctx = NewVariableDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SolidityParserRULE_variableDeclarationStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(591)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(588)
			p.Match(SolidityParserT__43)
		}
		{
			p.SetState(589)
			p.IdentifierList()
		}

	case 2:
		{
			p.SetState(590)
			p.VariableDeclaration()
		}

	}
	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__20 {
		{
			p.SetState(593)
			p.Match(SolidityParserT__20)
		}
		{
			p.SetState(594)
			p.expression(0)
		}

	}
	{
		p.SetState(597)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_identifierList
	return p
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifierListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterIdentifierList(s)
	}
}

func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitIdentifierList(s)
	}
}

func (p *SolidityParser) IdentifierList() (localctx IIdentifierListContext) {
	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SolidityParserRULE_identifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(599)
		p.Match(SolidityParserT__18)
	}
	p.SetState(606)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(601)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SolidityParserT__10 || _la == SolidityParserIdentifier {
				{
					p.SetState(600)
					p.Identifier()
				}

			}
			{
				p.SetState(603)
				p.Match(SolidityParserT__12)
			}

		}
		p.SetState(608)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())
	}
	p.SetState(610)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserIdentifier {
		{
			p.SetState(609)
			p.Identifier()
		}

	}
	{
		p.SetState(612)
		p.Match(SolidityParserT__19)
	}

	return localctx
}

// IElementaryTypeNameContext is an interface to support dynamic dispatch.
type IElementaryTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementaryTypeNameContext differentiates from other interfaces.
	IsElementaryTypeNameContext()
}

type ElementaryTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementaryTypeNameContext() *ElementaryTypeNameContext {
	var p = new(ElementaryTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_elementaryTypeName
	return p
}

func (*ElementaryTypeNameContext) IsElementaryTypeNameContext() {}

func NewElementaryTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementaryTypeNameContext {
	var p = new(ElementaryTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_elementaryTypeName

	return p
}

func (s *ElementaryTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementaryTypeNameContext) Int() antlr.TerminalNode {
	return s.GetToken(SolidityParserInt, 0)
}

func (s *ElementaryTypeNameContext) Uint() antlr.TerminalNode {
	return s.GetToken(SolidityParserUint, 0)
}

func (s *ElementaryTypeNameContext) Byte() antlr.TerminalNode {
	return s.GetToken(SolidityParserByte, 0)
}

func (s *ElementaryTypeNameContext) Fixed() antlr.TerminalNode {
	return s.GetToken(SolidityParserFixed, 0)
}

func (s *ElementaryTypeNameContext) Ufixed() antlr.TerminalNode {
	return s.GetToken(SolidityParserUfixed, 0)
}

func (s *ElementaryTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementaryTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementaryTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterElementaryTypeName(s)
	}
}

func (s *ElementaryTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitElementaryTypeName(s)
	}
}

func (p *SolidityParser) ElementaryTypeName() (localctx IElementaryTypeNameContext) {
	localctx = NewElementaryTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SolidityParserRULE_elementaryTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(614)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ExpressionContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *ExpressionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *SolidityParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *SolidityParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 104
	p.EnterRecursionRule(localctx, 104, SolidityParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(634)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(617)
			p.Match(SolidityParserT__50)
		}
		{
			p.SetState(618)
			p.typeName(0)
		}

	case 2:
		{
			p.SetState(619)
			p.Match(SolidityParserT__18)
		}
		{
			p.SetState(620)
			p.expression(0)
		}
		{
			p.SetState(621)
			p.Match(SolidityParserT__19)
		}

	case 3:
		{
			p.SetState(623)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__48 || _la == SolidityParserT__49) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(624)
			p.expression(19)
		}

	case 4:
		{
			p.SetState(625)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__51 || _la == SolidityParserT__52) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(626)
			p.expression(18)
		}

	case 5:
		{
			p.SetState(627)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__53 || _la == SolidityParserT__54) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(628)
			p.expression(17)
		}

	case 6:
		{
			p.SetState(629)
			p.Match(SolidityParserT__55)
		}
		{
			p.SetState(630)
			p.expression(16)
		}

	case 7:
		{
			p.SetState(631)
			p.Match(SolidityParserT__56)
		}
		{
			p.SetState(632)
			p.expression(15)
		}

	case 8:
		{
			p.SetState(633)
			p.PrimaryExpression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(695)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(693)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(636)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(637)
					p.Match(SolidityParserT__57)
				}
				{
					p.SetState(638)
					p.expression(15)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(639)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(640)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__9 || _la == SolidityParserT__58 || _la == SolidityParserT__59) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(641)
					p.expression(14)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(642)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(643)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__51 || _la == SolidityParserT__52) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(644)
					p.expression(13)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(645)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(646)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__60 || _la == SolidityParserT__61) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(647)
					p.expression(12)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(648)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(649)
					p.Match(SolidityParserT__62)
				}
				{
					p.SetState(650)
					p.expression(11)
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(651)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(652)
					p.Match(SolidityParserT__2)
				}
				{
					p.SetState(653)
					p.expression(10)
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(654)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(655)
					p.Match(SolidityParserT__63)
				}
				{
					p.SetState(656)
					p.expression(9)
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(657)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(658)
					_la = p.GetTokenStream().LA(1)

					if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__4)|(1<<SolidityParserT__5)|(1<<SolidityParserT__6))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(659)
					p.expression(8)
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(660)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(661)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__64 || _la == SolidityParserT__65) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(662)
					p.expression(7)
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(663)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(664)
					p.Match(SolidityParserT__66)
				}
				{
					p.SetState(665)
					p.expression(6)
				}

			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(666)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(667)
					p.Match(SolidityParserT__67)
				}
				{
					p.SetState(668)
					p.expression(5)
				}

			case 12:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(669)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(670)
					p.Match(SolidityParserT__68)
				}
				{
					p.SetState(671)
					p.expression(0)
				}
				{
					p.SetState(672)
					p.Match(SolidityParserT__69)
				}
				{
					p.SetState(673)
					p.expression(4)
				}

			case 13:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(675)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(676)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__20 || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(SolidityParserT__70-71))|(1<<(SolidityParserT__71-71))|(1<<(SolidityParserT__72-71))|(1<<(SolidityParserT__73-71))|(1<<(SolidityParserT__74-71))|(1<<(SolidityParserT__75-71))|(1<<(SolidityParserT__76-71))|(1<<(SolidityParserT__77-71))|(1<<(SolidityParserT__78-71))|(1<<(SolidityParserT__79-71)))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(677)
					p.expression(3)
				}

			case 14:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(678)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(679)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__48 || _la == SolidityParserT__49) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case 15:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(680)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(681)
					p.Match(SolidityParserT__29)
				}
				{
					p.SetState(682)
					p.expression(0)
				}
				{
					p.SetState(683)
					p.Match(SolidityParserT__30)
				}

			case 16:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(685)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(686)
					p.Match(SolidityParserT__18)
				}
				{
					p.SetState(687)
					p.FunctionCallArguments()
				}
				{
					p.SetState(688)
					p.Match(SolidityParserT__19)
				}

			case 17:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(690)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(691)
					p.Match(SolidityParserT__31)
				}
				{
					p.SetState(692)
					p.Identifier()
				}

			}

		}
		p.SetState(697)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserBooleanLiteral, 0)
}

func (s *PrimaryExpressionContext) NumberLiteral() INumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *PrimaryExpressionContext) HexLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexLiteral, 0)
}

func (s *PrimaryExpressionContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *PrimaryExpressionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrimaryExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *PrimaryExpressionContext) ElementaryTypeNameExpression() IElementaryTypeNameExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitPrimaryExpression(s)
	}
}

func (p *SolidityParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SolidityParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(705)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserBooleanLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(698)
			p.Match(SolidityParserBooleanLiteral)
		}

	case SolidityParserDecimalNumber, SolidityParserHexNumber:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(699)
			p.NumberLiteral()
		}

	case SolidityParserHexLiteral:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(700)
			p.Match(SolidityParserHexLiteral)
		}

	case SolidityParserStringLiteral:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(701)
			p.Match(SolidityParserStringLiteral)
		}

	case SolidityParserT__10, SolidityParserIdentifier:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(702)
			p.Identifier()
		}

	case SolidityParserT__18, SolidityParserT__29:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(703)
			p.TupleExpression()
		}

	case SolidityParserT__43, SolidityParserT__44, SolidityParserT__45, SolidityParserT__46, SolidityParserT__47, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(704)
			p.ElementaryTypeNameExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitExpressionList(s)
	}
}

func (p *SolidityParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SolidityParserRULE_expressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(707)
		p.expression(0)
	}
	p.SetState(712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__12 {
		{
			p.SetState(708)
			p.Match(SolidityParserT__12)
		}
		{
			p.SetState(709)
			p.expression(0)
		}

		p.SetState(714)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// INameValueListContext is an interface to support dynamic dispatch.
type INameValueListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameValueListContext differentiates from other interfaces.
	IsNameValueListContext()
}

type NameValueListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameValueListContext() *NameValueListContext {
	var p = new(NameValueListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_nameValueList
	return p
}

func (*NameValueListContext) IsNameValueListContext() {}

func NewNameValueListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameValueListContext {
	var p = new(NameValueListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_nameValueList

	return p
}

func (s *NameValueListContext) GetParser() antlr.Parser { return s.parser }

func (s *NameValueListContext) AllNameValue() []INameValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameValueContext)(nil)).Elem())
	var tst = make([]INameValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameValueContext)
		}
	}

	return tst
}

func (s *NameValueListContext) NameValue(i int) INameValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameValueContext)
}

func (s *NameValueListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameValueListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameValueListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterNameValueList(s)
	}
}

func (s *NameValueListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitNameValueList(s)
	}
}

func (p *SolidityParser) NameValueList() (localctx INameValueListContext) {
	localctx = NewNameValueListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SolidityParserRULE_nameValueList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(715)
		p.NameValue()
	}
	p.SetState(720)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(716)
				p.Match(SolidityParserT__12)
			}
			{
				p.SetState(717)
				p.NameValue()
			}

		}
		p.SetState(722)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext())
	}
	p.SetState(724)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 {
		{
			p.SetState(723)
			p.Match(SolidityParserT__12)
		}

	}

	return localctx
}

// INameValueContext is an interface to support dynamic dispatch.
type INameValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameValueContext differentiates from other interfaces.
	IsNameValueContext()
}

type NameValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameValueContext() *NameValueContext {
	var p = new(NameValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_nameValue
	return p
}

func (*NameValueContext) IsNameValueContext() {}

func NewNameValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameValueContext {
	var p = new(NameValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_nameValue

	return p
}

func (s *NameValueContext) GetParser() antlr.Parser { return s.parser }

func (s *NameValueContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NameValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NameValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterNameValue(s)
	}
}

func (s *NameValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitNameValue(s)
	}
}

func (p *SolidityParser) NameValue() (localctx INameValueContext) {
	localctx = NewNameValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SolidityParserRULE_nameValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(726)
		p.Identifier()
	}
	{
		p.SetState(727)
		p.Match(SolidityParserT__69)
	}
	{
		p.SetState(728)
		p.expression(0)
	}

	return localctx
}

// IFunctionCallArgumentsContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentsContext differentiates from other interfaces.
	IsFunctionCallArgumentsContext()
}

type FunctionCallArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentsContext() *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionCallArguments
	return p
}

func (*FunctionCallArgumentsContext) IsFunctionCallArgumentsContext() {}

func NewFunctionCallArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionCallArguments

	return p
}

func (s *FunctionCallArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentsContext) NameValueList() INameValueListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameValueListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameValueListContext)
}

func (s *FunctionCallArgumentsContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *FunctionCallArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionCallArguments(s)
	}
}

func (s *FunctionCallArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionCallArguments(s)
	}
}

func (p *SolidityParser) FunctionCallArguments() (localctx IFunctionCallArgumentsContext) {
	localctx = NewFunctionCallArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SolidityParserRULE_functionCallArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(738)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__11:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(730)
			p.Match(SolidityParserT__11)
		}
		p.SetState(732)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__10 || _la == SolidityParserIdentifier {
			{
				p.SetState(731)
				p.NameValueList()
			}

		}
		{
			p.SetState(734)
			p.Match(SolidityParserT__13)
		}

	case SolidityParserT__10, SolidityParserT__18, SolidityParserT__19, SolidityParserT__29, SolidityParserT__43, SolidityParserT__44, SolidityParserT__45, SolidityParserT__46, SolidityParserT__47, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserT__52, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserIdentifier, SolidityParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(736)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
			{
				p.SetState(735)
				p.ExpressionList()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssemblyBlockContext is an interface to support dynamic dispatch.
type IAssemblyBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyBlockContext differentiates from other interfaces.
	IsAssemblyBlockContext()
}

type AssemblyBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyBlockContext() *AssemblyBlockContext {
	var p = new(AssemblyBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyBlock
	return p
}

func (*AssemblyBlockContext) IsAssemblyBlockContext() {}

func NewAssemblyBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyBlockContext {
	var p = new(AssemblyBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyBlock

	return p
}

func (s *AssemblyBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyBlockContext) AllAssemblyItem() []IAssemblyItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyItemContext)(nil)).Elem())
	var tst = make([]IAssemblyItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyItemContext)
		}
	}

	return tst
}

func (s *AssemblyBlockContext) AssemblyItem(i int) IAssemblyItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyItemContext)
}

func (s *AssemblyBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyBlock(s)
	}
}

func (s *AssemblyBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyBlock(s)
	}
}

func (p *SolidityParser) AssemblyBlock() (localctx IAssemblyBlockContext) {
	localctx = NewAssemblyBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SolidityParserRULE_assemblyBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(740)
		p.Match(SolidityParserT__11)
	}
	p.SetState(744)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__11)|(1<<SolidityParserT__18)|(1<<SolidityParserT__22)|(1<<SolidityParserT__25))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(SolidityParserT__36-37))|(1<<(SolidityParserT__39-37))|(1<<(SolidityParserT__41-37))|(1<<(SolidityParserT__44-37))|(1<<(SolidityParserT__47-37)))) != 0) || (((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(SolidityParserT__80-81))|(1<<(SolidityParserT__82-81))|(1<<(SolidityParserT__83-81))|(1<<(SolidityParserDecimalNumber-81))|(1<<(SolidityParserHexNumber-81))|(1<<(SolidityParserHexLiteral-81))|(1<<(SolidityParserBreakKeyword-81))|(1<<(SolidityParserContinueKeyword-81))|(1<<(SolidityParserIdentifier-81)))) != 0) || _la == SolidityParserStringLiteral {
		{
			p.SetState(741)
			p.AssemblyItem()
		}

		p.SetState(746)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(747)
		p.Match(SolidityParserT__13)
	}

	return localctx
}

// IAssemblyItemContext is an interface to support dynamic dispatch.
type IAssemblyItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyItemContext differentiates from other interfaces.
	IsAssemblyItemContext()
}

type AssemblyItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyItemContext() *AssemblyItemContext {
	var p = new(AssemblyItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyItem
	return p
}

func (*AssemblyItemContext) IsAssemblyItemContext() {}

func NewAssemblyItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyItemContext {
	var p = new(AssemblyItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyItem

	return p
}

func (s *AssemblyItemContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyItemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyItemContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyItemContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyItemContext) AssemblyLocalDefinition() IAssemblyLocalDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLocalDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLocalDefinitionContext)
}

func (s *AssemblyItemContext) AssemblyAssignment() IAssemblyAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyAssignmentContext)
}

func (s *AssemblyItemContext) AssemblyStackAssignment() IAssemblyStackAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyStackAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyStackAssignmentContext)
}

func (s *AssemblyItemContext) LabelDefinition() ILabelDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelDefinitionContext)
}

func (s *AssemblyItemContext) AssemblySwitch() IAssemblySwitchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblySwitchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblySwitchContext)
}

func (s *AssemblyItemContext) AssemblyFunctionDefinition() IAssemblyFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyFunctionDefinitionContext)
}

func (s *AssemblyItemContext) AssemblyFor() IAssemblyForContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyForContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyForContext)
}

func (s *AssemblyItemContext) AssemblyIf() IAssemblyIfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIfContext)
}

func (s *AssemblyItemContext) BreakKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserBreakKeyword, 0)
}

func (s *AssemblyItemContext) ContinueKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserContinueKeyword, 0)
}

func (s *AssemblyItemContext) SubAssembly() ISubAssemblyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubAssemblyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubAssemblyContext)
}

func (s *AssemblyItemContext) NumberLiteral() INumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *AssemblyItemContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *AssemblyItemContext) HexLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexLiteral, 0)
}

func (s *AssemblyItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyItem(s)
	}
}

func (s *AssemblyItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyItem(s)
	}
}

func (p *SolidityParser) AssemblyItem() (localctx IAssemblyItemContext) {
	localctx = NewAssemblyItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SolidityParserRULE_assemblyItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(766)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(749)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(750)
			p.AssemblyBlock()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(751)
			p.AssemblyExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(752)
			p.AssemblyLocalDefinition()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(753)
			p.AssemblyAssignment()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(754)
			p.AssemblyStackAssignment()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(755)
			p.LabelDefinition()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(756)
			p.AssemblySwitch()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(757)
			p.AssemblyFunctionDefinition()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(758)
			p.AssemblyFor()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(759)
			p.AssemblyIf()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(760)
			p.Match(SolidityParserBreakKeyword)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(761)
			p.Match(SolidityParserContinueKeyword)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(762)
			p.SubAssembly()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(763)
			p.NumberLiteral()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(764)
			p.Match(SolidityParserStringLiteral)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(765)
			p.Match(SolidityParserHexLiteral)
		}

	}

	return localctx
}

// IAssemblyExpressionContext is an interface to support dynamic dispatch.
type IAssemblyExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyExpressionContext differentiates from other interfaces.
	IsAssemblyExpressionContext()
}

type AssemblyExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyExpressionContext() *AssemblyExpressionContext {
	var p = new(AssemblyExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyExpression
	return p
}

func (*AssemblyExpressionContext) IsAssemblyExpressionContext() {}

func NewAssemblyExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyExpressionContext {
	var p = new(AssemblyExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyExpression

	return p
}

func (s *AssemblyExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyExpressionContext) AssemblyCall() IAssemblyCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyCallContext)
}

func (s *AssemblyExpressionContext) AssemblyLiteral() IAssemblyLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLiteralContext)
}

func (s *AssemblyExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyExpression(s)
	}
}

func (s *AssemblyExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyExpression(s)
	}
}

func (p *SolidityParser) AssemblyExpression() (localctx IAssemblyExpressionContext) {
	localctx = NewAssemblyExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SolidityParserRULE_assemblyExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(770)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__10, SolidityParserT__41, SolidityParserT__44, SolidityParserT__47, SolidityParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(768)
			p.AssemblyCall()
		}

	case SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(769)
			p.AssemblyLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssemblyCallContext is an interface to support dynamic dispatch.
type IAssemblyCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyCallContext differentiates from other interfaces.
	IsAssemblyCallContext()
}

type AssemblyCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyCallContext() *AssemblyCallContext {
	var p = new(AssemblyCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyCall
	return p
}

func (*AssemblyCallContext) IsAssemblyCallContext() {}

func NewAssemblyCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyCallContext {
	var p = new(AssemblyCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyCall

	return p
}

func (s *AssemblyCallContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyCallContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyCallContext) AllAssemblyExpression() []IAssemblyExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem())
	var tst = make([]IAssemblyExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyExpressionContext)
		}
	}

	return tst
}

func (s *AssemblyCallContext) AssemblyExpression(i int) IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyCall(s)
	}
}

func (s *AssemblyCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyCall(s)
	}
}

func (p *SolidityParser) AssemblyCall() (localctx IAssemblyCallContext) {
	localctx = NewAssemblyCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SolidityParserRULE_assemblyCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(776)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__41:
		{
			p.SetState(772)
			p.Match(SolidityParserT__41)
		}

	case SolidityParserT__44:
		{
			p.SetState(773)
			p.Match(SolidityParserT__44)
		}

	case SolidityParserT__47:
		{
			p.SetState(774)
			p.Match(SolidityParserT__47)
		}

	case SolidityParserT__10, SolidityParserIdentifier:
		{
			p.SetState(775)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(790)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(778)
			p.Match(SolidityParserT__18)
		}
		p.SetState(780)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__10 || (((_la-42)&-(0x1f+1)) == 0 && ((1<<uint((_la-42)))&((1<<(SolidityParserT__41-42))|(1<<(SolidityParserT__44-42))|(1<<(SolidityParserT__47-42)))) != 0) || (((_la-95)&-(0x1f+1)) == 0 && ((1<<uint((_la-95)))&((1<<(SolidityParserDecimalNumber-95))|(1<<(SolidityParserHexNumber-95))|(1<<(SolidityParserHexLiteral-95))|(1<<(SolidityParserIdentifier-95))|(1<<(SolidityParserStringLiteral-95)))) != 0) {
			{
				p.SetState(779)
				p.AssemblyExpression()
			}

		}
		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 {
			{
				p.SetState(782)
				p.Match(SolidityParserT__12)
			}
			{
				p.SetState(783)
				p.AssemblyExpression()
			}

			p.SetState(788)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(789)
			p.Match(SolidityParserT__19)
		}

	}

	return localctx
}

// IAssemblyLocalDefinitionContext is an interface to support dynamic dispatch.
type IAssemblyLocalDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyLocalDefinitionContext differentiates from other interfaces.
	IsAssemblyLocalDefinitionContext()
}

type AssemblyLocalDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyLocalDefinitionContext() *AssemblyLocalDefinitionContext {
	var p = new(AssemblyLocalDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyLocalDefinition
	return p
}

func (*AssemblyLocalDefinitionContext) IsAssemblyLocalDefinitionContext() {}

func NewAssemblyLocalDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyLocalDefinitionContext {
	var p = new(AssemblyLocalDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyLocalDefinition

	return p
}

func (s *AssemblyLocalDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyLocalDefinitionContext) AssemblyIdentifierOrList() IAssemblyIdentifierOrListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierOrListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierOrListContext)
}

func (s *AssemblyLocalDefinitionContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyLocalDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyLocalDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyLocalDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyLocalDefinition(s)
	}
}

func (s *AssemblyLocalDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyLocalDefinition(s)
	}
}

func (p *SolidityParser) AssemblyLocalDefinition() (localctx IAssemblyLocalDefinitionContext) {
	localctx = NewAssemblyLocalDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SolidityParserRULE_assemblyLocalDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(792)
		p.Match(SolidityParserT__80)
	}
	{
		p.SetState(793)
		p.AssemblyIdentifierOrList()
	}
	p.SetState(796)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__81 {
		{
			p.SetState(794)
			p.Match(SolidityParserT__81)
		}
		{
			p.SetState(795)
			p.AssemblyExpression()
		}

	}

	return localctx
}

// IAssemblyAssignmentContext is an interface to support dynamic dispatch.
type IAssemblyAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyAssignmentContext differentiates from other interfaces.
	IsAssemblyAssignmentContext()
}

type AssemblyAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyAssignmentContext() *AssemblyAssignmentContext {
	var p = new(AssemblyAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyAssignment
	return p
}

func (*AssemblyAssignmentContext) IsAssemblyAssignmentContext() {}

func NewAssemblyAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyAssignmentContext {
	var p = new(AssemblyAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyAssignment

	return p
}

func (s *AssemblyAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyAssignmentContext) AssemblyIdentifierOrList() IAssemblyIdentifierOrListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierOrListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierOrListContext)
}

func (s *AssemblyAssignmentContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyAssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyAssignment(s)
	}
}

func (s *AssemblyAssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyAssignment(s)
	}
}

func (p *SolidityParser) AssemblyAssignment() (localctx IAssemblyAssignmentContext) {
	localctx = NewAssemblyAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SolidityParserRULE_assemblyAssignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(798)
		p.AssemblyIdentifierOrList()
	}
	{
		p.SetState(799)
		p.Match(SolidityParserT__81)
	}
	{
		p.SetState(800)
		p.AssemblyExpression()
	}

	return localctx
}

// IAssemblyIdentifierOrListContext is an interface to support dynamic dispatch.
type IAssemblyIdentifierOrListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIdentifierOrListContext differentiates from other interfaces.
	IsAssemblyIdentifierOrListContext()
}

type AssemblyIdentifierOrListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIdentifierOrListContext() *AssemblyIdentifierOrListContext {
	var p = new(AssemblyIdentifierOrListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierOrList
	return p
}

func (*AssemblyIdentifierOrListContext) IsAssemblyIdentifierOrListContext() {}

func NewAssemblyIdentifierOrListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIdentifierOrListContext {
	var p = new(AssemblyIdentifierOrListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierOrList

	return p
}

func (s *AssemblyIdentifierOrListContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIdentifierOrListContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyIdentifierOrListContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyIdentifierOrListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIdentifierOrListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyIdentifierOrListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyIdentifierOrList(s)
	}
}

func (s *AssemblyIdentifierOrListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyIdentifierOrList(s)
	}
}

func (p *SolidityParser) AssemblyIdentifierOrList() (localctx IAssemblyIdentifierOrListContext) {
	localctx = NewAssemblyIdentifierOrListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SolidityParserRULE_assemblyIdentifierOrList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(807)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__10, SolidityParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(802)
			p.Identifier()
		}

	case SolidityParserT__18:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(803)
			p.Match(SolidityParserT__18)
		}
		{
			p.SetState(804)
			p.AssemblyIdentifierList()
		}
		{
			p.SetState(805)
			p.Match(SolidityParserT__19)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssemblyIdentifierListContext is an interface to support dynamic dispatch.
type IAssemblyIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIdentifierListContext differentiates from other interfaces.
	IsAssemblyIdentifierListContext()
}

type AssemblyIdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIdentifierListContext() *AssemblyIdentifierListContext {
	var p = new(AssemblyIdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierList
	return p
}

func (*AssemblyIdentifierListContext) IsAssemblyIdentifierListContext() {}

func NewAssemblyIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIdentifierListContext {
	var p = new(AssemblyIdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierList

	return p
}

func (s *AssemblyIdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIdentifierListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AssemblyIdentifierListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyIdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyIdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyIdentifierList(s)
	}
}

func (s *AssemblyIdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyIdentifierList(s)
	}
}

func (p *SolidityParser) AssemblyIdentifierList() (localctx IAssemblyIdentifierListContext) {
	localctx = NewAssemblyIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SolidityParserRULE_assemblyIdentifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(809)
		p.Identifier()
	}
	p.SetState(814)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__12 {
		{
			p.SetState(810)
			p.Match(SolidityParserT__12)
		}
		{
			p.SetState(811)
			p.Identifier()
		}

		p.SetState(816)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAssemblyStackAssignmentContext is an interface to support dynamic dispatch.
type IAssemblyStackAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyStackAssignmentContext differentiates from other interfaces.
	IsAssemblyStackAssignmentContext()
}

type AssemblyStackAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyStackAssignmentContext() *AssemblyStackAssignmentContext {
	var p = new(AssemblyStackAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyStackAssignment
	return p
}

func (*AssemblyStackAssignmentContext) IsAssemblyStackAssignmentContext() {}

func NewAssemblyStackAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyStackAssignmentContext {
	var p = new(AssemblyStackAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyStackAssignment

	return p
}

func (s *AssemblyStackAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyStackAssignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyStackAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyStackAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyStackAssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyStackAssignment(s)
	}
}

func (s *AssemblyStackAssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyStackAssignment(s)
	}
}

func (p *SolidityParser) AssemblyStackAssignment() (localctx IAssemblyStackAssignmentContext) {
	localctx = NewAssemblyStackAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SolidityParserRULE_assemblyStackAssignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(817)
		p.Match(SolidityParserT__82)
	}
	{
		p.SetState(818)
		p.Identifier()
	}

	return localctx
}

// ILabelDefinitionContext is an interface to support dynamic dispatch.
type ILabelDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelDefinitionContext differentiates from other interfaces.
	IsLabelDefinitionContext()
}

type LabelDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelDefinitionContext() *LabelDefinitionContext {
	var p = new(LabelDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_labelDefinition
	return p
}

func (*LabelDefinitionContext) IsLabelDefinitionContext() {}

func NewLabelDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelDefinitionContext {
	var p = new(LabelDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_labelDefinition

	return p
}

func (s *LabelDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LabelDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterLabelDefinition(s)
	}
}

func (s *LabelDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitLabelDefinition(s)
	}
}

func (p *SolidityParser) LabelDefinition() (localctx ILabelDefinitionContext) {
	localctx = NewLabelDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SolidityParserRULE_labelDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(820)
		p.Identifier()
	}
	{
		p.SetState(821)
		p.Match(SolidityParserT__69)
	}

	return localctx
}

// IAssemblySwitchContext is an interface to support dynamic dispatch.
type IAssemblySwitchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblySwitchContext differentiates from other interfaces.
	IsAssemblySwitchContext()
}

type AssemblySwitchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblySwitchContext() *AssemblySwitchContext {
	var p = new(AssemblySwitchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblySwitch
	return p
}

func (*AssemblySwitchContext) IsAssemblySwitchContext() {}

func NewAssemblySwitchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblySwitchContext {
	var p = new(AssemblySwitchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblySwitch

	return p
}

func (s *AssemblySwitchContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblySwitchContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblySwitchContext) AllAssemblyCase() []IAssemblyCaseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyCaseContext)(nil)).Elem())
	var tst = make([]IAssemblyCaseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyCaseContext)
		}
	}

	return tst
}

func (s *AssemblySwitchContext) AssemblyCase(i int) IAssemblyCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyCaseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyCaseContext)
}

func (s *AssemblySwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblySwitchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblySwitchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblySwitch(s)
	}
}

func (s *AssemblySwitchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblySwitch(s)
	}
}

func (p *SolidityParser) AssemblySwitch() (localctx IAssemblySwitchContext) {
	localctx = NewAssemblySwitchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SolidityParserRULE_assemblySwitch)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(823)
		p.Match(SolidityParserT__83)
	}
	{
		p.SetState(824)
		p.AssemblyExpression()
	}
	p.SetState(828)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__84 || _la == SolidityParserT__85 {
		{
			p.SetState(825)
			p.AssemblyCase()
		}

		p.SetState(830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAssemblyCaseContext is an interface to support dynamic dispatch.
type IAssemblyCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyCaseContext differentiates from other interfaces.
	IsAssemblyCaseContext()
}

type AssemblyCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyCaseContext() *AssemblyCaseContext {
	var p = new(AssemblyCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyCase
	return p
}

func (*AssemblyCaseContext) IsAssemblyCaseContext() {}

func NewAssemblyCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyCaseContext {
	var p = new(AssemblyCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyCase

	return p
}

func (s *AssemblyCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyCaseContext) AssemblyLiteral() IAssemblyLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLiteralContext)
}

func (s *AssemblyCaseContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyCase(s)
	}
}

func (s *AssemblyCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyCase(s)
	}
}

func (p *SolidityParser) AssemblyCase() (localctx IAssemblyCaseContext) {
	localctx = NewAssemblyCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SolidityParserRULE_assemblyCase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(837)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__84:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(831)
			p.Match(SolidityParserT__84)
		}
		{
			p.SetState(832)
			p.AssemblyLiteral()
		}
		{
			p.SetState(833)
			p.AssemblyBlock()
		}

	case SolidityParserT__85:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(835)
			p.Match(SolidityParserT__85)
		}
		{
			p.SetState(836)
			p.AssemblyBlock()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssemblyFunctionDefinitionContext is an interface to support dynamic dispatch.
type IAssemblyFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyFunctionDefinitionContext differentiates from other interfaces.
	IsAssemblyFunctionDefinitionContext()
}

type AssemblyFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyFunctionDefinitionContext() *AssemblyFunctionDefinitionContext {
	var p = new(AssemblyFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFunctionDefinition
	return p
}

func (*AssemblyFunctionDefinitionContext) IsAssemblyFunctionDefinitionContext() {}

func NewAssemblyFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyFunctionDefinitionContext {
	var p = new(AssemblyFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFunctionDefinition

	return p
}

func (s *AssemblyFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyFunctionDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyFunctionReturns() IAssemblyFunctionReturnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyFunctionReturnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyFunctionReturnsContext)
}

func (s *AssemblyFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyFunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyFunctionDefinition(s)
	}
}

func (s *AssemblyFunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyFunctionDefinition(s)
	}
}

func (p *SolidityParser) AssemblyFunctionDefinition() (localctx IAssemblyFunctionDefinitionContext) {
	localctx = NewAssemblyFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SolidityParserRULE_assemblyFunctionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(839)
		p.Match(SolidityParserT__25)
	}
	{
		p.SetState(840)
		p.Identifier()
	}
	{
		p.SetState(841)
		p.Match(SolidityParserT__18)
	}
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__10 || _la == SolidityParserIdentifier {
		{
			p.SetState(842)
			p.AssemblyIdentifierList()
		}

	}
	{
		p.SetState(845)
		p.Match(SolidityParserT__19)
	}
	p.SetState(847)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__86 {
		{
			p.SetState(846)
			p.AssemblyFunctionReturns()
		}

	}
	{
		p.SetState(849)
		p.AssemblyBlock()
	}

	return localctx
}

// IAssemblyFunctionReturnsContext is an interface to support dynamic dispatch.
type IAssemblyFunctionReturnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyFunctionReturnsContext differentiates from other interfaces.
	IsAssemblyFunctionReturnsContext()
}

type AssemblyFunctionReturnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyFunctionReturnsContext() *AssemblyFunctionReturnsContext {
	var p = new(AssemblyFunctionReturnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFunctionReturns
	return p
}

func (*AssemblyFunctionReturnsContext) IsAssemblyFunctionReturnsContext() {}

func NewAssemblyFunctionReturnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyFunctionReturnsContext {
	var p = new(AssemblyFunctionReturnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFunctionReturns

	return p
}

func (s *AssemblyFunctionReturnsContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyFunctionReturnsContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyFunctionReturnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyFunctionReturnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyFunctionReturnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyFunctionReturns(s)
	}
}

func (s *AssemblyFunctionReturnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyFunctionReturns(s)
	}
}

func (p *SolidityParser) AssemblyFunctionReturns() (localctx IAssemblyFunctionReturnsContext) {
	localctx = NewAssemblyFunctionReturnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SolidityParserRULE_assemblyFunctionReturns)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(851)
		p.Match(SolidityParserT__86)
	}
	{
		p.SetState(852)
		p.AssemblyIdentifierList()
	}

	return localctx
}

// IAssemblyForContext is an interface to support dynamic dispatch.
type IAssemblyForContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyForContext differentiates from other interfaces.
	IsAssemblyForContext()
}

type AssemblyForContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyForContext() *AssemblyForContext {
	var p = new(AssemblyForContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFor
	return p
}

func (*AssemblyForContext) IsAssemblyForContext() {}

func NewAssemblyForContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyForContext {
	var p = new(AssemblyForContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFor

	return p
}

func (s *AssemblyForContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyForContext) AllAssemblyExpression() []IAssemblyExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem())
	var tst = make([]IAssemblyExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyExpressionContext)
		}
	}

	return tst
}

func (s *AssemblyForContext) AssemblyExpression(i int) IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyForContext) AllAssemblyBlock() []IAssemblyBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem())
	var tst = make([]IAssemblyBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyBlockContext)
		}
	}

	return tst
}

func (s *AssemblyForContext) AssemblyBlock(i int) IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyForContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyFor(s)
	}
}

func (s *AssemblyForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyFor(s)
	}
}

func (p *SolidityParser) AssemblyFor() (localctx IAssemblyForContext) {
	localctx = NewAssemblyForContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SolidityParserRULE_assemblyFor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(854)
		p.Match(SolidityParserT__22)
	}
	p.SetState(857)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__11:
		{
			p.SetState(855)
			p.AssemblyBlock()
		}

	case SolidityParserT__10, SolidityParserT__41, SolidityParserT__44, SolidityParserT__47, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserIdentifier, SolidityParserStringLiteral:
		{
			p.SetState(856)
			p.AssemblyExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(859)
		p.AssemblyExpression()
	}
	p.SetState(862)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__11:
		{
			p.SetState(860)
			p.AssemblyBlock()
		}

	case SolidityParserT__10, SolidityParserT__41, SolidityParserT__44, SolidityParserT__47, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserIdentifier, SolidityParserStringLiteral:
		{
			p.SetState(861)
			p.AssemblyExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(864)
		p.AssemblyBlock()
	}

	return localctx
}

// IAssemblyIfContext is an interface to support dynamic dispatch.
type IAssemblyIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIfContext differentiates from other interfaces.
	IsAssemblyIfContext()
}

type AssemblyIfContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIfContext() *AssemblyIfContext {
	var p = new(AssemblyIfContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIf
	return p
}

func (*AssemblyIfContext) IsAssemblyIfContext() {}

func NewAssemblyIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIfContext {
	var p = new(AssemblyIfContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIf

	return p
}

func (s *AssemblyIfContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIfContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyIfContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyIf(s)
	}
}

func (s *AssemblyIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyIf(s)
	}
}

func (p *SolidityParser) AssemblyIf() (localctx IAssemblyIfContext) {
	localctx = NewAssemblyIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SolidityParserRULE_assemblyIf)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(866)
		p.Match(SolidityParserT__36)
	}
	{
		p.SetState(867)
		p.AssemblyExpression()
	}
	{
		p.SetState(868)
		p.AssemblyBlock()
	}

	return localctx
}

// IAssemblyLiteralContext is an interface to support dynamic dispatch.
type IAssemblyLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyLiteralContext differentiates from other interfaces.
	IsAssemblyLiteralContext()
}

type AssemblyLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyLiteralContext() *AssemblyLiteralContext {
	var p = new(AssemblyLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyLiteral
	return p
}

func (*AssemblyLiteralContext) IsAssemblyLiteralContext() {}

func NewAssemblyLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyLiteralContext {
	var p = new(AssemblyLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyLiteral

	return p
}

func (s *AssemblyLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyLiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *AssemblyLiteralContext) DecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserDecimalNumber, 0)
}

func (s *AssemblyLiteralContext) HexNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexNumber, 0)
}

func (s *AssemblyLiteralContext) HexLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexLiteral, 0)
}

func (s *AssemblyLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyLiteral(s)
	}
}

func (s *AssemblyLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyLiteral(s)
	}
}

func (p *SolidityParser) AssemblyLiteral() (localctx IAssemblyLiteralContext) {
	localctx = NewAssemblyLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SolidityParserRULE_assemblyLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(870)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-95)&-(0x1f+1)) == 0 && ((1<<uint((_la-95)))&((1<<(SolidityParserDecimalNumber-95))|(1<<(SolidityParserHexNumber-95))|(1<<(SolidityParserHexLiteral-95))|(1<<(SolidityParserStringLiteral-95)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISubAssemblyContext is an interface to support dynamic dispatch.
type ISubAssemblyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubAssemblyContext differentiates from other interfaces.
	IsSubAssemblyContext()
}

type SubAssemblyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubAssemblyContext() *SubAssemblyContext {
	var p = new(SubAssemblyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_subAssembly
	return p
}

func (*SubAssemblyContext) IsSubAssemblyContext() {}

func NewSubAssemblyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubAssemblyContext {
	var p = new(SubAssemblyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_subAssembly

	return p
}

func (s *SubAssemblyContext) GetParser() antlr.Parser { return s.parser }

func (s *SubAssemblyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SubAssemblyContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *SubAssemblyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubAssemblyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubAssemblyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterSubAssembly(s)
	}
}

func (s *SubAssemblyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitSubAssembly(s)
	}
}

func (p *SolidityParser) SubAssembly() (localctx ISubAssemblyContext) {
	localctx = NewSubAssemblyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SolidityParserRULE_subAssembly)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(872)
		p.Match(SolidityParserT__39)
	}
	{
		p.SetState(873)
		p.Identifier()
	}
	{
		p.SetState(874)
		p.AssemblyBlock()
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterTupleExpression(s)
	}
}

func (s *TupleExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitTupleExpression(s)
	}
}

func (p *SolidityParser) TupleExpression() (localctx ITupleExpressionContext) {
	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SolidityParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(902)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__18:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(876)
			p.Match(SolidityParserT__18)
		}

		p.SetState(878)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
			{
				p.SetState(877)
				p.expression(0)
			}

		}
		p.SetState(886)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 {
			{
				p.SetState(880)
				p.Match(SolidityParserT__12)
			}
			p.SetState(882)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
				{
					p.SetState(881)
					p.expression(0)
				}

			}

			p.SetState(888)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(889)
			p.Match(SolidityParserT__19)
		}

	case SolidityParserT__29:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(890)
			p.Match(SolidityParserT__29)
		}
		p.SetState(899)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__10)|(1<<SolidityParserT__18)|(1<<SolidityParserT__29))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(SolidityParserT__43-44))|(1<<(SolidityParserT__44-44))|(1<<(SolidityParserT__45-44))|(1<<(SolidityParserT__46-44))|(1<<(SolidityParserT__47-44))|(1<<(SolidityParserT__48-44))|(1<<(SolidityParserT__49-44))|(1<<(SolidityParserT__50-44))|(1<<(SolidityParserT__51-44))|(1<<(SolidityParserT__52-44))|(1<<(SolidityParserT__53-44))|(1<<(SolidityParserT__54-44))|(1<<(SolidityParserT__55-44))|(1<<(SolidityParserT__56-44)))) != 0) || (((_la-88)&-(0x1f+1)) == 0 && ((1<<uint((_la-88)))&((1<<(SolidityParserInt-88))|(1<<(SolidityParserUint-88))|(1<<(SolidityParserByte-88))|(1<<(SolidityParserFixed-88))|(1<<(SolidityParserUfixed-88))|(1<<(SolidityParserBooleanLiteral-88))|(1<<(SolidityParserDecimalNumber-88))|(1<<(SolidityParserHexNumber-88))|(1<<(SolidityParserHexLiteral-88))|(1<<(SolidityParserIdentifier-88))|(1<<(SolidityParserStringLiteral-88)))) != 0) {
			{
				p.SetState(891)
				p.expression(0)
			}
			p.SetState(896)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SolidityParserT__12 {
				{
					p.SetState(892)
					p.Match(SolidityParserT__12)
				}
				{
					p.SetState(893)
					p.expression(0)
				}

				p.SetState(898)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(901)
			p.Match(SolidityParserT__30)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IElementaryTypeNameExpressionContext is an interface to support dynamic dispatch.
type IElementaryTypeNameExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementaryTypeNameExpressionContext differentiates from other interfaces.
	IsElementaryTypeNameExpressionContext()
}

type ElementaryTypeNameExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementaryTypeNameExpressionContext() *ElementaryTypeNameExpressionContext {
	var p = new(ElementaryTypeNameExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_elementaryTypeNameExpression
	return p
}

func (*ElementaryTypeNameExpressionContext) IsElementaryTypeNameExpressionContext() {}

func NewElementaryTypeNameExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementaryTypeNameExpressionContext {
	var p = new(ElementaryTypeNameExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_elementaryTypeNameExpression

	return p
}

func (s *ElementaryTypeNameExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementaryTypeNameExpressionContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *ElementaryTypeNameExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementaryTypeNameExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementaryTypeNameExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterElementaryTypeNameExpression(s)
	}
}

func (s *ElementaryTypeNameExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitElementaryTypeNameExpression(s)
	}
}

func (p *SolidityParser) ElementaryTypeNameExpression() (localctx IElementaryTypeNameExpressionContext) {
	localctx = NewElementaryTypeNameExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SolidityParserRULE_elementaryTypeNameExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(904)
		p.ElementaryTypeName()
	}

	return localctx
}

// INumberLiteralContext is an interface to support dynamic dispatch.
type INumberLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberLiteralContext differentiates from other interfaces.
	IsNumberLiteralContext()
}

type NumberLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberLiteralContext() *NumberLiteralContext {
	var p = new(NumberLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_numberLiteral
	return p
}

func (*NumberLiteralContext) IsNumberLiteralContext() {}

func NewNumberLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberLiteralContext {
	var p = new(NumberLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_numberLiteral

	return p
}

func (s *NumberLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberLiteralContext) DecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserDecimalNumber, 0)
}

func (s *NumberLiteralContext) HexNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexNumber, 0)
}

func (s *NumberLiteralContext) NumberUnit() antlr.TerminalNode {
	return s.GetToken(SolidityParserNumberUnit, 0)
}

func (s *NumberLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterNumberLiteral(s)
	}
}

func (s *NumberLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitNumberLiteral(s)
	}
}

func (p *SolidityParser) NumberLiteral() (localctx INumberLiteralContext) {
	localctx = NewNumberLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SolidityParserRULE_numberLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(906)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserDecimalNumber || _la == SolidityParserHexNumber) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(908)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(907)
			p.Match(SolidityParserNumberUnit)
		}

	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(SolidityParserIdentifier, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *SolidityParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SolidityParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(910)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserT__10 || _la == SolidityParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *SolidityParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 30:
		var t *TypeNameContext = nil
		if localctx != nil {
			t = localctx.(*TypeNameContext)
		}
		return p.TypeName_Sempred(t, predIndex)

	case 52:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SolidityParser) TypeName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 21)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
